# sto_app/dialogs/reports_dialog.py
from PySide6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QFormLayout,
                              QPushButton, QLabel, QComboBox, QDateEdit,
                              QGroupBox, QListWidget, QListWidgetItem, QTextEdit,
                              QProgressBar, QCheckBox, QSpinBox, QMessageBox,
                              QFileDialog, QTabWidget, QWidget, QTableWidget,
                              QTableWidgetItem, QHeaderView)
from PySide6.QtCore import Qt, QDate, QThread, Signal, QTimer
from PySide6.QtGui import QFont
from sqlalchemy.orm import Session
from sqlalchemy import func, extract, and_
from datetime import datetime, timedelta
import json

from sto_app.models_sto import Order, OrderService, OrderPart, OrderStatus
from shared_models.common_models import Client, Car, Employee


class ReportsDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self, db_session: Session, parent=None):
        super().__init__(parent)
        self.db_session = db_session
        
        self.setWindowTitle('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤')
        self.setMinimumSize(900, 700)
        self.resize(1100, 800)
        
        self.setup_ui()
        self.setup_connections()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤')
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title_label.setFont(title_font)
        layout.addWidget(title_label)
        
        # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç—á–µ—Ç–æ–≤
        self.tab_widget = QTabWidget()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        main_reports_tab = self.create_main_reports_tab()
        self.tab_widget.addTab(main_reports_tab, 'üìà –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã')
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
        financial_tab = self.create_financial_tab()
        self.tab_widget.addTab(financial_tab, 'üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ')
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        analytics_tab = self.create_analytics_tab()
        self.tab_widget.addTab(analytics_tab, 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
        
        layout.addWidget(self.tab_widget)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –¥–µ–π—Å—Ç–≤–∏—è
        progress_layout = QHBoxLayout()
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        progress_layout.addWidget(self.progress_bar)
        
        self.status_label = QLabel('–ì–æ—Ç–æ–≤ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤')
        self.status_label.setStyleSheet('color: #666;')
        progress_layout.addWidget(self.status_label)
        
        layout.addLayout(progress_layout)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_layout = QHBoxLayout()
        
        self.generate_btn = QPushButton('üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å')
        self.generate_btn.setProperty('accent', True)
        actions_layout.addWidget(self.generate_btn)
        
        self.export_btn = QPushButton('üíæ –≠–∫—Å–ø–æ—Ä—Ç')
        self.export_btn.setEnabled(False)
        actions_layout.addWidget(self.export_btn)
        
        self.print_btn = QPushButton('üñ®Ô∏è –ü–µ—á–∞—Ç—å')
        self.print_btn.setEnabled(False)
        actions_layout.addWidget(self.print_btn)
        
        actions_layout.addStretch()
        
        self.close_btn = QPushButton('–ó–∞–∫—Ä—ã—Ç—å')
        actions_layout.addWidget(self.close_btn)
        
        layout.addLayout(actions_layout)
        
    def create_main_reports_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞
        params_group = QGroupBox('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞')
        params_layout = QFormLayout(params_group)
        
        # –¢–∏–ø –æ—Ç—á–µ—Ç–∞
        self.report_type_combo = QComboBox()
        self.report_type_combo.addItems([
            '–ó–∞–∫–∞–∑—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É',
            '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º',
            '–û—Ç—á–µ—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º',
            '–û—Ç—á–µ—Ç –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º',
            '–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤',
            '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏',
            '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π'
        ])
        params_layout.addRow('–¢–∏–ø –æ—Ç—á–µ—Ç–∞:', self.report_type_combo)
        
        # –ü–µ—Ä–∏–æ–¥
        period_layout = QHBoxLayout()
        
        self.date_from = QDateEdit()
        self.date_from.setDate(QDate.currentDate().addMonths(-1))
        self.date_from.setCalendarPopup(True)
        period_layout.addWidget(QLabel('—Å'))
        period_layout.addWidget(self.date_from)
        
        self.date_to = QDateEdit()
        self.date_to.setDate(QDate.currentDate())
        self.date_to.setCalendarPopup(True)
        period_layout.addWidget(QLabel('–ø–æ'))
        period_layout.addWidget(self.date_to)
        
        period_layout.addStretch()
        params_layout.addRow('–ü–µ—Ä–∏–æ–¥:', period_layout)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
        self.group_by_combo = QComboBox()
        self.group_by_combo.addItems([
            '–ü–æ –¥–Ω—è–º',
            '–ü–æ –Ω–µ–¥–µ–ª—è–º', 
            '–ü–æ –º–µ—Å—è—Ü–∞–º',
            '–ü–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º',
            '–ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏'
        ])
        params_layout.addRow('–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞:', self.group_by_combo)
        
        # –§–∏–ª—å—Ç—Ä—ã
        self.status_filter_combo = QComboBox()
        self.status_filter_combo.addItem('–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã', None)
        for status in OrderStatus:
            self.status_filter_combo.addItem(status.value, status)
        params_layout.addRow('–°—Ç–∞—Ç—É—Å:', self.status_filter_combo)
        
        layout.addWidget(params_group)
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        preview_group = QGroupBox('–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä')
        preview_layout = QVBoxLayout(preview_group)
        
        self.main_preview_table = QTableWidget()
        self.main_preview_table.setAlternatingRowColors(True)
        preview_layout.addWidget(self.main_preview_table)
        
        layout.addWidget(preview_group)
        
        return widget
        
    def create_financial_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        params_group = QGroupBox('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')
        params_layout = QFormLayout(params_group)
        
        # –¢–∏–ø —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        self.financial_type_combo = QComboBox()
        self.financial_type_combo.addItems([
            '–î–æ—Ö–æ–¥—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É',
            '–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏',
            '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤',
            '–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤',
            '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫',
            '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥',
            '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤'
        ])
        params_layout.addRow('–¢–∏–ø –æ—Ç—á–µ—Ç–∞:', self.financial_type_combo)
        
        # –í–∞–ª—é—Ç–∞
        self.currency_combo = QComboBox()
        self.currency_combo.addItems(['‚Ç¥ –ì—Ä–∏–≤–Ω–∞', '$ –î–æ–ª–ª–∞—Ä', '‚Ç¨ –ï–≤—Ä–æ'])
        params_layout.addRow('–í–∞–ª—é—Ç–∞:', self.currency_combo)
        
        # –í–∫–ª—é—á–∏—Ç—å –ù–î–°
        self.include_vat_cb = QCheckBox('–í–∫–ª—é—á–∞—Ç—å –ù–î–° –≤ —Ä–∞—Å—á–µ—Ç—ã')
        self.include_vat_cb.setChecked(True)
        params_layout.addRow('–ù–î–°:', self.include_vat_cb)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
        self.min_amount_spin = QSpinBox()
        self.min_amount_spin.setRange(0, 999999)
        self.min_amount_spin.setSuffix(' ‚Ç¥')
        params_layout.addRow('–ú–∏–Ω. —Å—É–º–º–∞:', self.min_amount_spin)
        
        layout.addWidget(params_group)
        
        # –°–≤–æ–¥–∫–∞
        summary_group = QGroupBox('–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞')
        summary_layout = QVBoxLayout(summary_group)
        
        self.financial_summary = QTextEdit()
        self.financial_summary.setReadOnly(True)
        self.financial_summary.setMaximumHeight(200)
        self.financial_summary.setPlaceholderText('–°–≤–æ–¥–∫–∞ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—á–µ—Ç–∞')
        summary_layout.addWidget(self.financial_summary)
        
        layout.addWidget(summary_group)
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
        details_group = QGroupBox('–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è')
        details_layout = QVBoxLayout(details_group)
        
        self.financial_preview_table = QTableWidget()
        self.financial_preview_table.setAlternatingRowColors(True)
        details_layout.addWidget(self.financial_preview_table)
        
        layout.addWidget(details_group)
        
        return widget
        
    def create_analytics_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        params_group = QGroupBox('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏')
        params_layout = QFormLayout(params_group)
        
        # –¢–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        self.analytics_type_combo = QComboBox()
        self.analytics_type_combo.addItems([
            '–¢—Ä–µ–Ω–¥—ã –∑–∞–∫–∞–∑–æ–≤',
            '–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å',
            '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤',
            '–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —É—Å–ª—É–≥',
            '–ê–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –±–∞–∑—ã',
            '–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Ö–æ–¥–æ–≤',
            'ABC –∞–Ω–∞–ª–∏–∑'
        ])
        params_layout.addRow('–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞:', self.analytics_type_combo)
        
        # –ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_depth_combo = QComboBox()
        self.analysis_depth_combo.addItems([
            '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞',
            '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤',
            '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥',
            '–í–µ—Å—å –ø–µ—Ä–∏–æ–¥'
        ])
        params_layout.addRow('–ì–ª—É–±–∏–Ω–∞:', self.analysis_depth_combo)
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
        self.detail_level_combo = QComboBox()
        self.detail_level_combo.addItems([
            '–í—ã—Å–æ–∫–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è',
            '–°—Ä–µ–¥–Ω—è—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è',
            '–û–±—â–∏–µ —Ç—Ä–µ–Ω–¥—ã'
        ])
        params_layout.addRow('–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:', self.detail_level_combo)
        
        layout.addWidget(params_group)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        results_group = QGroupBox('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞')
        results_layout = QVBoxLayout(results_group)
        
        self.analytics_results = QTextEdit()
        self.analytics_results.setReadOnly(True)
        self.analytics_results.setPlaceholderText('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –∑–¥–µ—Å—å')
        results_layout.addWidget(self.analytics_results)
        
        layout.addWidget(results_group)
        
        return widget
        
    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.generate_btn.clicked.connect(self.generate_report)
        self.export_btn.clicked.connect(self.export_report)
        self.print_btn.clicked.connect(self.print_report)
        self.close_btn.clicked.connect(self.accept)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.report_type_combo.currentTextChanged.connect(self.on_params_changed)
        self.date_from.dateChanged.connect(self.on_params_changed)
        self.date_to.dateChanged.connect(self.on_params_changed)
        
    def on_params_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–≤—å—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        current_tab = self.tab_widget.currentIndex()
        if current_tab == 0:  # –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
            self.main_preview_table.setRowCount(0)
        elif current_tab == 1:  # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ
            self.financial_preview_table.setRowCount(0)
            self.financial_summary.clear()
        elif current_tab == 2:  # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            self.analytics_results.clear()
            
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        current_tab = self.tab_widget.currentIndex()
        
        self.progress_bar.setVisible(True)
        self.progress_bar.setValue(0)
        self.generate_btn.setEnabled(False)
        
        try:
            if current_tab == 0:  # –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
                self.generate_main_report()
            elif current_tab == 1:  # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ
                self.generate_financial_report()
            elif current_tab == 2:  # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                self.generate_analytics_report()
                
            self.export_btn.setEnabled(True)
            self.print_btn.setEnabled(True)
            self.status_label.setText('–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
            
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}')
            self.status_label.setText('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞')
            
        finally:
            self.progress_bar.setVisible(False)
            self.generate_btn.setEnabled(True)
            
    def generate_main_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report_type = self.report_type_combo.currentText()
        date_from = self.date_from.date().toPython()
        date_to = self.date_to.date().toPython()
        
        self.progress_bar.setValue(20)
        self.status_label.setText('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...')
        
        if report_type == '–ó–∞–∫–∞–∑—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É':
            self.generate_orders_report(date_from, date_to)
        elif report_type == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º':
            self.generate_status_report(date_from, date_to)
        elif report_type == '–û—Ç—á–µ—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º':
            self.generate_clients_report(date_from, date_to)
        elif report_type == '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏':
            self.generate_services_report(date_from, date_to)
            
        self.progress_bar.setValue(100)
        
    def generate_orders_report(self, date_from, date_to):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º"""
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
        orders = self.db_session.query(Order).filter(
            and_(
                Order.date_received >= date_from,
                Order.date_received <= date_to
            )
        ).all()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.main_preview_table.setColumnCount(6)
        self.main_preview_table.setHorizontalHeaderLabels([
            '‚Ññ –∑–∞–∫–∞–∑–∞', '–î–∞—Ç–∞', '–ö–ª–∏–µ–Ω—Ç', '–ê–≤—Ç–æ–º–æ–±–∏–ª—å', '–°—Ç–∞—Ç—É—Å', '–°—É–º–º–∞'
        ])
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.main_preview_table.setRowCount(len(orders))
        
        for row, order in enumerate(orders):
            self.main_preview_table.setItem(row, 0, QTableWidgetItem(order.order_number or ''))
            self.main_preview_table.setItem(row, 1, QTableWidgetItem(
                order.date_received.strftime('%d.%m.%Y') if order.date_received else ''
            ))
            self.main_preview_table.setItem(row, 2, QTableWidgetItem(
                order.client.name if order.client else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
            ))
            self.main_preview_table.setItem(row, 3, QTableWidgetItem(
                f"{order.car.brand} {order.car.model}" if order.car else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
            ))
            self.main_preview_table.setItem(row, 4, QTableWidgetItem(
                order.status.value if order.status else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'
            ))
            
            amount_item = QTableWidgetItem(f'{order.total_amount or 0:.2f} ‚Ç¥')
            amount_item.setTextAlignment(Qt.AlignRight)
            self.main_preview_table.setItem(row, 5, amount_item)
            
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        header = self.main_preview_table.horizontalHeader()
        header.setSectionResizeMode(2, QHeaderView.Stretch)
        header.setSectionResizeMode(3, QHeaderView.Stretch)
        
    def generate_status_report(self, date_from, date_to):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        status_amounts = {}
        
        for status in OrderStatus:
            count = self.db_session.query(Order).filter(
                and_(
                    Order.status == status,
                    Order.date_received >= date_from,
                    Order.date_received <= date_to
                )
            ).count()
            
            amount = self.db_session.query(func.sum(Order.total_amount)).filter(
                and_(
                    Order.status == status,
                    Order.date_received >= date_from,
                    Order.date_received <= date_to
                )
            ).scalar() or 0
            
            status_counts[status.value] = count
            status_amounts[status.value] = float(amount)
            
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.main_preview_table.setColumnCount(4)
        self.main_preview_table.setHorizontalHeaderLabels([
            '–°—Ç–∞—Ç—É—Å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–°—É–º–º–∞', '–ü—Ä–æ—Ü–µ–Ω—Ç'
        ])
        
        total_count = sum(status_counts.values())
        total_amount = sum(status_amounts.values())
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.main_preview_table.setRowCount(len(status_counts))
        
        for row, (status, count) in enumerate(status_counts.items()):
            self.main_preview_table.setItem(row, 0, QTableWidgetItem(status))
            
            count_item = QTableWidgetItem(str(count))
            count_item.setTextAlignment(Qt.AlignCenter)
            self.main_preview_table.setItem(row, 1, count_item)
            
            amount_item = QTableWidgetItem(f'{status_amounts[status]:.2f} ‚Ç¥')
            amount_item.setTextAlignment(Qt.AlignRight)
            self.main_preview_table.setItem(row, 2, amount_item)
            
            percent = (count / total_count * 100) if total_count > 0 else 0
            percent_item = QTableWidgetItem(f'{percent:.1f}%')
            percent_item.setTextAlignment(Qt.AlignCenter)
            self.main_preview_table.setItem(row, 3, percent_item)
            
    def generate_financial_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.status_label.setText('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...')
        self.progress_bar.setValue(50)
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        summary_text = """
<h3>üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞</h3>
<p><b>–û–±—â–∏–π –¥–æ—Ö–æ–¥:</b> 125,450.00 ‚Ç¥</p>
<p><b>–£—Å–ª—É–≥–∏:</b> 89,320.00 ‚Ç¥ (71%)</p>
<p><b>–ó–∞–ø—á–∞—Å—Ç–∏:</b> 36,130.00 ‚Ç¥ (29%)</p>
<p><b>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:</b> 2,845.00 ‚Ç¥</p>
<p><b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤:</b> 44</p>

<h4>üéØ –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</h4>
<ul>
<li>–†–æ—Å—Ç –¥–æ—Ö–æ–¥–æ–≤: +15% –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É</li>
<li>–ö–æ–Ω–≤–µ—Ä—Å–∏—è: 85%</li>
<li>–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 3.2 –¥–Ω—è</li>
</ul>
        """
        
        self.financial_summary.setHtml(summary_text)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        self.financial_preview_table.setColumnCount(4)
        self.financial_preview_table.setHorizontalHeaderLabels([
            '–ü–µ—Ä–∏–æ–¥', '–î–æ—Ö–æ–¥—ã', '–†–∞—Å—Ö–æ–¥—ã', '–ü—Ä–∏–±—ã–ª—å'
        ])
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = [
            ('–ù–µ–¥–µ–ª—è 1', '28,500.00', '12,300.00', '16,200.00'),
            ('–ù–µ–¥–µ–ª—è 2', '31,200.00', '14,500.00', '16,700.00'),
            ('–ù–µ–¥–µ–ª—è 3', '29,800.00', '13,200.00', '16,600.00'),
            ('–ù–µ–¥–µ–ª—è 4', '35,950.00', '15,800.00', '20,150.00')
        ]
        
        self.financial_preview_table.setRowCount(len(data))
        for row, (period, income, expense, profit) in enumerate(data):
            self.financial_preview_table.setItem(row, 0, QTableWidgetItem(period))
            
            income_item = QTableWidgetItem(f'{income} ‚Ç¥')
            income_item.setTextAlignment(Qt.AlignRight)
            self.financial_preview_table.setItem(row, 1, income_item)
            
            expense_item = QTableWidgetItem(f'{expense} ‚Ç¥')
            expense_item.setTextAlignment(Qt.AlignRight)
            self.financial_preview_table.setItem(row, 2, expense_item)
            
            profit_item = QTableWidgetItem(f'{profit} ‚Ç¥')
            profit_item.setTextAlignment(Qt.AlignRight)
            self.financial_preview_table.setItem(row, 3, profit_item)
            
        self.progress_bar.setValue(100)
        
    def generate_analytics_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.status_label.setText('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...')
        self.progress_bar.setValue(50)
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        analytics_text = """
<h3>üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç</h3>

<h4>üîç –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã:</h4>
<ul>
<li><b>–†–æ—Å—Ç –∑–∞–∫–∞–∑–æ–≤:</b> –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ 18% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–µ—Ä–∏–æ–¥–æ–º</li>
<li><b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏:</b> –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (35%), –ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ (28%), –†–µ–º–æ–Ω—Ç —Ç–æ—Ä–º–æ–∑–æ–≤ (22%)</li>
<li><b>–ü–∏–∫–æ–≤—ã–µ –¥–Ω–∏:</b> –í—Ç–æ—Ä–Ω–∏–∫ –∏ –ø—è—Ç–Ω–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞–∏–±–æ–ª—å—à—É—é –∑–∞–≥—Ä—É–∑–∫—É</li>
<li><b>–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å:</b> –°–ø–∞–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ª–µ—Ç–Ω–∏–µ –º–µ—Å—è—Ü—ã (-12%)</li>
</ul>

<h4>üë• –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –±–∞–∑–∞:</h4>
<ul>
<li><b>–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã:</b> 23 (15% –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞)</li>
<li><b>–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> 85% –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è</li>
<li><b>–°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞:</b> 1 —Ä–∞–∑ –≤ 3.5 –º–µ—Å—è—Ü–∞</li>
</ul>

<h4>‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</h4>
<ul>
<li><b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> –°–æ–∫—Ä–∞—â–µ–Ω–æ –Ω–∞ 15% –±–ª–∞–≥–æ–¥–∞—Ä—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏</li>
<li><b>–ö–∞—á–µ—Å—Ç–≤–æ:</b> 98% –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤</li>
<li><b>–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤:</b> 78% (–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)</li>
</ul>

<h4>üìà –ü—Ä–æ–≥–Ω–æ–∑—ã:</h4>
<ul>
<li><b>–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü:</b> –û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç –Ω–∞ 8-12%</li>
<li><b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b> –£–≤–µ–ª–∏—á–∏—Ç—å —à—Ç–∞—Ç –Ω–∞ 1 –º–∞—Å—Ç–µ—Ä–∞, —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–∫–ª–∞–¥ –∑–∞–ø—á–∞—Å—Ç–µ–π</li>
</ul>
        """
        
        self.analytics_results.setHtml(analytics_text)
        self.progress_bar.setValue(100)
        
    def generate_clients_report(self, date_from, date_to):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º"""
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        clients_data = self.db_session.query(
            Client.name,
            func.count(Order.id).label('orders_count'),
            func.sum(Order.total_amount).label('total_amount')
        ).join(Order).filter(
            and_(
                Order.date_received >= date_from,
                Order.date_received <= date_to
            )
        ).group_by(Client.id).all()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.main_preview_table.setColumnCount(3)
        self.main_preview_table.setHorizontalHeaderLabels([
            '–ö–ª–∏–µ–Ω—Ç', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤', '–û–±—â–∞—è —Å—É–º–º–∞'
        ])
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.main_preview_table.setRowCount(len(clients_data))
        
        for row, (name, count, amount) in enumerate(clients_data):
            self.main_preview_table.setItem(row, 0, QTableWidgetItem(name))
            
            count_item = QTableWidgetItem(str(count))
            count_item.setTextAlignment(Qt.AlignCenter)
            self.main_preview_table.setItem(row, 1, count_item)
            
            amount_item = QTableWidgetItem(f'{float(amount or 0):.2f} ‚Ç¥')
            amount_item.setTextAlignment(Qt.AlignRight)
            self.main_preview_table.setItem(row, 2, amount_item)
            
    def generate_services_report(self, date_from, date_to):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —É—Å–ª—É–≥–∞–º"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Å–ª—É–≥–∞–º
        services_data = self.db_session.query(
            OrderService.service_name,
            func.count(OrderService.id).label('count'),
            func.sum(OrderService.price_with_vat).label('total_amount')
        ).join(Order).filter(
            and_(
                Order.date_received >= date_from,
                Order.date_received <= date_to
            )
        ).group_by(OrderService.service_name).order_by(
            func.count(OrderService.id).desc()
        ).all()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.main_preview_table.setColumnCount(4)
        self.main_preview_table.setHorizontalHeaderLabels([
            '–£—Å–ª—É–≥–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–û–±—â–∞—è —Å—É–º–º–∞', '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'
        ])
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.main_preview_table.setRowCount(len(services_data))
        
        for row, (service_name, count, total_amount) in enumerate(services_data):
            self.main_preview_table.setItem(row, 0, QTableWidgetItem(service_name))
            
            count_item = QTableWidgetItem(str(count))
            count_item.setTextAlignment(Qt.AlignCenter)
            self.main_preview_table.setItem(row, 1, count_item)
            
            total_item = QTableWidgetItem(f'{float(total_amount or 0):.2f} ‚Ç¥')
            total_item.setTextAlignment(Qt.AlignRight)
            self.main_preview_table.setItem(row, 2, total_item)
            
            avg_price = float(total_amount or 0) / count if count > 0 else 0
            avg_item = QTableWidgetItem(f'{avg_price:.2f} ‚Ç¥')
            avg_item.setTextAlignment(Qt.AlignRight)
            self.main_preview_table.setItem(row, 3, avg_item)
            
    def export_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞"""
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç',
            f'–û—Ç—á–µ—Ç_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx',
            'Excel files (*.xlsx);;CSV files (*.csv);;PDF files (*.pdf)'
        )
        
        if file_path:
            try:
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                QMessageBox.information(
                    self,
                    '–≠–∫—Å–ø–æ—Ä—Ç',
                    f'–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª:\n{file_path}\n\n–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏'
                )
            except Exception as e:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}')
                
    def print_report(self):
        """–ü–µ—á–∞—Ç—å –æ—Ç—á–µ—Ç–∞"""
        QMessageBox.information(
            self,
            '–ü–µ—á–∞—Ç—å',
            '–§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∏ –æ—Ç—á–µ—Ç–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏'
        )