# sto_app/dialogs/search_dialog.py
from PySide6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QFormLayout,
                              QLineEdit, QComboBox, QPushButton, QTableWidget,
                              QTableWidgetItem, QHeaderView, QLabel, QCheckBox,
                              QDateEdit, QGroupBox, QTabWidget, QMessageBox)
from PySide6.QtCore import Qt, QDate, Signal
from PySide6.QtGui import QFont
from sqlalchemy.orm import Session
from sqlalchemy import or_, and_

from shared_models.common_models import Client, Car, Employee
from sto_app.models_sto import Order, OrderService, OrderPart, ServiceCatalog


class SearchDialog(QDialog):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º"""
    
    # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    item_selected = Signal(str, object)  # (—Ç–∏–ø, –æ–±—ä–µ–∫—Ç)
    
    def __init__(self, db_session: Session, parent=None):
        super().__init__(parent)
        self.db_session = db_session
        
        self.setWindowTitle('üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫')
        self.setMinimumSize(800, 600)
        self.resize(1000, 700)
        
        self.setup_ui()
        self.setup_connections()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel('üîç –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º')
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title_label.setFont(title_font)
        layout.addWidget(title_label)
        
        # –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞
        search_group = QGroupBox('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞')
        search_layout = QFormLayout(search_group)
        
        # –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        self.search_edit = QLineEdit()
        self.search_edit.setPlaceholderText('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞...')
        search_layout.addRow('–ü–æ–∏—Å–∫:', self.search_edit)
        
        # –¢–∏–ø –ø–æ–∏—Å–∫–∞
        self.search_type_combo = QComboBox()
        self.search_type_combo.addItems([
            '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            '–ö–ª–∏–µ–Ω—Ç—ã',
            '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏', 
            '–ó–∞–∫–∞–∑—ã',
            '–£—Å–ª—É–≥–∏',
            '–ó–∞–ø—á–∞—Å—Ç–∏',
            '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'
        ])
        search_layout.addRow('–ö–∞—Ç–µ–≥–æ—Ä–∏—è:', self.search_type_combo)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        filters_layout = QHBoxLayout()
        
        self.case_sensitive_cb = QCheckBox('–£—á–∏—Ç—ã–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä')
        filters_layout.addWidget(self.case_sensitive_cb)
        
        self.exact_match_cb = QCheckBox('–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ')
        filters_layout.addWidget(self.exact_match_cb)
        
        filters_layout.addStretch()
        
        search_layout.addRow('–û–ø—Ü–∏–∏:', filters_layout)
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
        buttons_layout = QHBoxLayout()
        
        self.search_btn = QPushButton('üîç –ù–∞–π—Ç–∏')
        self.search_btn.setDefault(True)
        buttons_layout.addWidget(self.search_btn)
        
        self.clear_btn = QPushButton('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å')
        buttons_layout.addWidget(self.clear_btn)
        
        buttons_layout.addStretch()
        
        search_layout.addRow(buttons_layout)
        
        layout.addWidget(search_group)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        results_group = QGroupBox('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞')
        results_layout = QVBoxLayout(results_group)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        self.results_info = QLabel('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏"')
        self.results_info.setStyleSheet('color: #666; font-style: italic;')
        results_layout.addWidget(self.results_info)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_table = QTableWidget()
        self.results_table.setColumnCount(5)
        self.results_table.setHorizontalHeaderLabels([
            '–¢–∏–ø', 'ID', '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', '–î–∞—Ç–∞'
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.results_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Fixed)
        header.setSectionResizeMode(1, QHeaderView.Fixed)
        header.setSectionResizeMode(2, QHeaderView.Stretch)
        header.setSectionResizeMode(3, QHeaderView.Stretch)
        header.setSectionResizeMode(4, QHeaderView.Fixed)
        
        self.results_table.setColumnWidth(0, 100)
        self.results_table.setColumnWidth(1, 80)
        self.results_table.setColumnWidth(4, 120)
        
        self.results_table.setAlternatingRowColors(True)
        self.results_table.setSelectionBehavior(QTableWidget.SelectRows)
        self.results_table.setSelectionMode(QTableWidget.SingleSelection)
        
        results_layout.addWidget(self.results_table)
        
        layout.addWidget(results_group)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_layout = QHBoxLayout()
        
        self.select_btn = QPushButton('‚úÖ –í—ã–±—Ä–∞—Ç—å')
        self.select_btn.setEnabled(False)
        actions_layout.addWidget(self.select_btn)
        
        self.view_btn = QPushButton('üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä')
        self.view_btn.setEnabled(False)
        actions_layout.addWidget(self.view_btn)
        
        actions_layout.addStretch()
        
        self.close_btn = QPushButton('–ó–∞–∫—Ä—ã—Ç—å')
        actions_layout.addWidget(self.close_btn)
        
        layout.addLayout(actions_layout)
        
    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.search_edit.returnPressed.connect(self.perform_search)
        self.search_btn.clicked.connect(self.perform_search)
        self.clear_btn.clicked.connect(self.clear_search)
        
        self.results_table.itemSelectionChanged.connect(self.on_selection_changed)
        self.results_table.itemDoubleClicked.connect(self.select_item)
        
        self.select_btn.clicked.connect(self.select_item)
        self.view_btn.clicked.connect(self.view_item)
        self.close_btn.clicked.connect(self.reject)
        
    def perform_search(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫"""
        query = self.search_edit.text().strip()
        
        if not query:
            self.results_info.setText('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å')
            self.results_table.setRowCount(0)
            return
            
        search_type = self.search_type_combo.currentText()
        case_sensitive = self.case_sensitive_cb.isChecked()
        exact_match = self.exact_match_cb.isChecked()
        
        try:
            results = []
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞
            if search_type in ['–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–ö–ª–∏–µ–Ω—Ç—ã']:
                results.extend(self.search_clients(query, case_sensitive, exact_match))
                
            if search_type in ['–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏']:
                results.extend(self.search_cars(query, case_sensitive, exact_match))
                
            if search_type in ['–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–ó–∞–∫–∞–∑—ã']:
                results.extend(self.search_orders(query, case_sensitive, exact_match))
                
            if search_type in ['–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–£—Å–ª—É–≥–∏']:
                results.extend(self.search_services(query, case_sensitive, exact_match))
                
            if search_type in ['–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏']:
                results.extend(self.search_employees(query, case_sensitive, exact_match))
                
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.display_results(results)
            
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}')
            
    def search_clients(self, query, case_sensitive, exact_match):
        """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        results = []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
        if exact_match:
            if case_sensitive:
                conditions = [
                    Client.name == query,
                    Client.phone == query,
                    Client.email == query
                ]
            else:
                conditions = [
                    Client.name.ilike(query),
                    Client.phone.ilike(query),
                    Client.email.ilike(query)
                ]
        else:
            if case_sensitive:
                pattern = f'%{query}%'
                conditions = [
                    Client.name.like(pattern),
                    Client.phone.like(pattern),
                    Client.email.like(pattern),
                    Client.address.like(pattern)
                ]
            else:
                pattern = f'%{query}%'
                conditions = [
                    Client.name.ilike(pattern),
                    Client.phone.ilike(pattern),
                    Client.email.ilike(pattern),
                    Client.address.ilike(pattern)
                ]
        
        clients = self.db_session.query(Client).filter(or_(*conditions)).all()
        
        for client in clients:
            results.append({
                'type': '–ö–ª–∏–µ–Ω—Ç',
                'id': client.id,
                'main_info': client.name,
                'additional': f'üìû {client.phone} | üìß {client.email or ""}',
                'date': client.created_at.strftime('%d.%m.%Y') if hasattr(client, 'created_at') else '',
                'object': client
            })
            
        return results
        
    def search_cars(self, query, case_sensitive, exact_match):
        """–ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
        results = []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
        if exact_match:
            if case_sensitive:
                conditions = [
                    Car.vin == query,
                    Car.license_plate == query,
                    Car.brand == query,
                    Car.model == query
                ]
            else:
                conditions = [
                    Car.vin.ilike(query),
                    Car.license_plate.ilike(query),
                    Car.brand.ilike(query),
                    Car.model.ilike(query)
                ]
        else:
            pattern = f'%{query}%'
            if case_sensitive:
                conditions = [
                    Car.vin.like(pattern),
                    Car.license_plate.like(pattern),
                    Car.brand.like(pattern),
                    Car.model.like(pattern)
                ]
            else:
                conditions = [
                    Car.vin.ilike(pattern),
                    Car.license_plate.ilike(pattern),
                    Car.brand.ilike(pattern),
                    Car.model.ilike(pattern)
                ]
        
        cars = self.db_session.query(Car).filter(or_(*conditions)).all()
        
        for car in cars:
            results.append({
                'type': '–ê–≤—Ç–æ–º–æ–±–∏–ª—å',
                'id': car.id,
                'main_info': f'{car.brand} {car.model} ({car.year or ""})',
                'additional': f'üî¢ {car.license_plate or ""} | VIN: {car.vin or ""}',
                'date': car.created_at.strftime('%d.%m.%Y') if hasattr(car, 'created_at') else '',
                'object': car
            })
            
        return results
        
    def search_orders(self, query, case_sensitive, exact_match):
        """–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤"""
        results = []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
        if exact_match:
            if case_sensitive:
                conditions = [Order.order_number == query]
            else:
                conditions = [Order.order_number.ilike(query)]
        else:
            pattern = f'%{query}%'
            if case_sensitive:
                conditions = [
                    Order.order_number.like(pattern),
                    Order.notes.like(pattern)
                ]
            else:
                conditions = [
                    Order.order_number.ilike(pattern),
                    Order.notes.ilike(pattern)
                ]
        
        orders = self.db_session.query(Order).filter(or_(*conditions)).all()
        
        for order in orders:
            client_name = order.client.name if order.client else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            car_info = f"{order.car.brand} {order.car.model}" if order.car else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            results.append({
                'type': '–ó–∞–∫–∞–∑',
                'id': order.id,
                'main_info': f'‚Ññ {order.order_number} | {client_name}',
                'additional': f'üöó {car_info} | üí∞ {order.total_amount or 0:.2f} ‚Ç¥',
                'date': order.date_received.strftime('%d.%m.%Y') if order.date_received else '',
                'object': order
            })
            
        return results
        
    def search_services(self, query, case_sensitive, exact_match):
        """–ü–æ–∏—Å–∫ —É—Å–ª—É–≥"""
        results = []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
        if exact_match:
            if case_sensitive:
                conditions = [ServiceCatalog.name == query]
            else:
                conditions = [ServiceCatalog.name.ilike(query)]
        else:
            pattern = f'%{query}%'
            if case_sensitive:
                conditions = [
                    ServiceCatalog.name.like(pattern),
                    ServiceCatalog.description.like(pattern),
                    ServiceCatalog.synonyms.like(pattern)
                ]
            else:
                conditions = [
                    ServiceCatalog.name.ilike(pattern),
                    ServiceCatalog.description.ilike(pattern),
                    ServiceCatalog.synonyms.ilike(pattern)
                ]
        
        services = self.db_session.query(ServiceCatalog).filter(or_(*conditions)).all()
        
        for service in services:
            results.append({
                'type': '–£—Å–ª—É–≥–∞',
                'id': service.id,
                'main_info': service.name,
                'additional': f'üí∞ {service.price:.2f} ‚Ç¥ | {service.description or ""}',
                'date': service.created_at.strftime('%d.%m.%Y') if hasattr(service, 'created_at') else '',
                'object': service
            })
            
        return results
        
    def search_employees(self, query, case_sensitive, exact_match):
        """–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        results = []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞
        if exact_match:
            if case_sensitive:
                conditions = [
                    Employee.name == query,
                    Employee.phone == query,
                    Employee.email == query
                ]
            else:
                conditions = [
                    Employee.name.ilike(query),
                    Employee.phone.ilike(query),
                    Employee.email.ilike(query)
                ]
        else:
            pattern = f'%{query}%'
            if case_sensitive:
                conditions = [
                    Employee.name.like(pattern),
                    Employee.phone.like(pattern),
                    Employee.email.like(pattern),
                    Employee.position.like(pattern)
                ]
            else:
                conditions = [
                    Employee.name.ilike(pattern),
                    Employee.phone.ilike(pattern),
                    Employee.email.ilike(pattern),
                    Employee.position.ilike(pattern)
                ]
        
        employees = self.db_session.query(Employee).filter(or_(*conditions)).all()
        
        for employee in employees:
            results.append({
                'type': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
                'id': employee.id,
                'main_info': employee.name,
                'additional': f'üìû {employee.phone or ""} | üëî {employee.position or ""}',
                'date': employee.created_at.strftime('%d.%m.%Y') if hasattr(employee, 'created_at') else '',
                'object': employee
            })
            
        return results
        
    def display_results(self, results):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        self.results_table.setRowCount(len(results))
        
        if not results:
            self.results_info.setText('–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            return
            
        self.results_info.setText(f'–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}')
        
        for row, result in enumerate(results):
            # –¢–∏–ø
            type_item = QTableWidgetItem(result['type'])
            self.results_table.setItem(row, 0, type_item)
            
            # ID
            id_item = QTableWidgetItem(str(result['id']))
            id_item.setTextAlignment(Qt.AlignCenter)
            self.results_table.setItem(row, 1, id_item)
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            main_item = QTableWidgetItem(result['main_info'])
            self.results_table.setItem(row, 2, main_item)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            additional_item = QTableWidgetItem(result['additional'])
            self.results_table.setItem(row, 3, additional_item)
            
            # –î–∞—Ç–∞
            date_item = QTableWidgetItem(result['date'])
            date_item.setTextAlignment(Qt.AlignCenter)
            self.results_table.setItem(row, 4, date_item)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–µ
            type_item.setData(Qt.UserRole, result['object'])
            
    def clear_search(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"""
        self.search_edit.clear()
        self.search_type_combo.setCurrentIndex(0)
        self.case_sensitive_cb.setChecked(False)
        self.exact_match_cb.setChecked(False)
        self.results_table.setRowCount(0)
        self.results_info.setText('–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏"')
        
    def on_selection_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞"""
        has_selection = bool(self.results_table.selectedItems())
        self.select_btn.setEnabled(has_selection)
        self.view_btn.setEnabled(has_selection)
        
    def select_item(self):
        """–í—ã–±—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç"""
        current_row = self.results_table.currentRow()
        if current_row >= 0:
            type_item = self.results_table.item(current_row, 0)
            if type_item:
                obj = type_item.data(Qt.UserRole)
                item_type = type_item.text()
                
                self.item_selected.emit(item_type, obj)
                self.accept()
                
    def view_item(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —ç–ª–µ–º–µ–Ω—Ç–∞"""
        current_row = self.results_table.currentRow()
        if current_row >= 0:
            type_item = self.results_table.item(current_row, 0)
            if type_item:
                obj = type_item.data(Qt.UserRole)
                item_type = type_item.text()
                
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
                QMessageBox.information(
                    self, 
                    '–ü—Ä–æ—Å–º–æ—Ç—Ä', 
                    f'–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –¥–ª—è {item_type} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏'
                )
            