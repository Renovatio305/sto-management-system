# sto_app/main_window.py
from PySide6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                              QTabWidget, QStatusBar, QMessageBox, QFrame,
                              QLabel, QMenuBar, QMenu, QPushButton, QSizePolicy,
                              QTabBar, QSpacerItem)
from PySide6.QtCore import Qt, QSettings, Signal, QTimer
from PySide6.QtGui import QAction, QIcon, QKeySequence, QFont
from PySide6.QtCore import QSize

from datetime import datetime
import sys
import os

# –ò–º–ø–æ—Ä—Ç –≤–∫–ª–∞–¥–æ–∫
from .views.orders_view import OrdersView
from .views.new_order_view import NewOrderView
from .views.catalogs_view import CatalogsView
from .views.settings_view import SettingsView

# –ò–º–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–æ–≤
from .dialogs.about_dialog import AboutDialog
from .dialogs.search_dialog import SearchDialog
from .dialogs.calendar_dialog import CalendarDialog
from .dialogs.reports_dialog import ReportsDialog

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
from config.database import SessionLocal


class CompactActionButton(QPushButton):
    """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    
    def __init__(self, text, icon=None, color="#3498db"):
        super().__init__(text)
        if icon:
            self.setIcon(QIcon(icon))
        
        self.setStyleSheet(f"""
            QPushButton {{
                background-color: {color};
                color: white;
                font-weight: bold;
                padding: 6px 12px;
                border-radius: 4px;
                border: none;
                margin: 0 2px;
                min-width: 80px;
                max-height: 32px;
            }}
            QPushButton:hover {{
                background-color: {self._lighten_color(color)};
            }}
            QPushButton:pressed {{
                background-color: {self._darken_color(color)};
            }}
            QPushButton:disabled {{
                background-color: #95a5a6;
                color: #7f8c8d;
            }}
        """)
    
    def _lighten_color(self, color):
        """–û—Å–≤–µ—Ç–ª–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è hover —ç—Ñ—Ñ–µ–∫—Ç–∞"""
        color_map = {
            "#3498db": "#5dade2",
            "#e67e22": "#f39c12", 
            "#9b59b6": "#af7ac5",
            "#27ae60": "#2ecc71"
        }
        return color_map.get(color, color)
    
    def _darken_color(self, color):
        """–ó–∞—Ç–µ–º–Ω–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è pressed —ç—Ñ—Ñ–µ–∫—Ç–∞"""
        color_map = {
            "#3498db": "#2980b9",
            "#e67e22": "#d35400",
            "#9b59b6": "#8e44ad", 
            "#27ae60": "#229954"
        }
        return color_map.get(color, color)


class CustomTabWidget(QTabWidget):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –≤–∏–¥–∂–µ—Ç –≤–∫–ª–∞–¥–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–ø—Ä–∞–≤–∞"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent_window = parent
        self.setup_custom_tab_bar()
    
    def setup_custom_tab_bar(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ç–∞–±-–±–∞—Ä–∞"""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–∞–±-–±–∞—Ä–∞ –∏ –∫–Ω–æ–ø–æ–∫
        tab_container = QWidget()
        tab_layout = QHBoxLayout(tab_container)
        tab_layout.setContentsMargins(0, 0, 0, 0)
        tab_layout.setSpacing(5)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∞–±-–±–∞—Ä
        original_tab_bar = self.tabBar()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç –º–µ–∂–¥—É —Ç–∞–±–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        tab_layout.addWidget(original_tab_bar)
        tab_layout.addStretch()
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.create_action_buttons(tab_layout)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∞–±-–±–∞—Ä
        self.setTabBar(CustomTabBar(tab_container))
    
    def create_action_buttons(self, layout):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        # –ü–æ–∏—Å–∫
        self.search_btn = CompactActionButton("üîç", color="#9b59b6")
        self.search_btn.setToolTip("–ü–æ–∏—Å–∫ (Ctrl+F)")
        self.search_btn.setMaximumWidth(40)
        layout.addWidget(self.search_btn)
        
        # –ö–∞–ª–µ–Ω–¥–∞—Ä—å
        self.calendar_btn = CompactActionButton("üìÖ", color="#3498db")
        self.calendar_btn.setToolTip("–ö–∞–ª–µ–Ω–¥–∞—Ä—å (Ctrl+K)")
        self.calendar_btn.setMaximumWidth(40)
        layout.addWidget(self.calendar_btn)
        
        # –û—Ç—á—ë—Ç—ã
        self.reports_btn = CompactActionButton("üìä", color="#e67e22")
        self.reports_btn.setToolTip("–û—Ç—á—ë—Ç—ã (Ctrl+R)")
        self.reports_btn.setMaximumWidth(40)
        layout.addWidget(self.reports_btn)
        
        # –ó–∞—Ä–ø–ª–∞—Ç–∞
        self.salary_btn = CompactActionButton("üí∞", color="#f39c12")
        self.salary_btn.setToolTip("–ó–∞—Ä–ø–ª–∞—Ç–∞")
        self.salary_btn.setMaximumWidth(40)
        layout.addWidget(self.salary_btn)
        
        # –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
        self.clients_btn = CompactActionButton("üë•", color="#27ae60")
        self.clients_btn.setToolTip("–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã")
        self.clients_btn.setMaximumWidth(40)
        layout.addWidget(self.clients_btn)


class CustomTabBar(QTabBar):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ç–∞–±-–±–∞—Ä"""
    
    def __init__(self, widget):
        super().__init__()
        self.widget = widget
        
    def tabSizeHint(self, index):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–∫–ª–∞–¥–æ–∫"""
        size = super().tabSizeHint(index)
        # –î–µ–ª–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞
        size.setHeight(40)
        return size


class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –°–¢–û"""
    
    # –°–∏–≥–Ω–∞–ª—ã
    theme_changed = Signal(str)
    language_changed = Signal(str)
    
    def __init__(self):
        super().__init__()
        self.db_session = SessionLocal()
        self.settings = QSettings('STOApp', 'MainWindow')
        
        self.setWindowTitle('–°–¢–û Management System v3.0')
        self.setGeometry(100, 100, 1400, 900)
        self.setMinimumSize(1200, 800)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏
        try:
            self.setWindowIcon(QIcon('resources/icons/app.png'))
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–∫–æ–Ω–∫–∏
        
        self.setup_ui()
        self.load_settings()
        self.setup_connections()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.autosave_timer = QTimer()
        self.autosave_timer.timeout.connect(self.autosave)
        self.autosave_timer.start(300000)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QVBoxLayout(central_widget)
        main_layout.setContentsMargins(5, 5, 5, 5)
        
        # –ú–µ–Ω—é
        self.create_menu_bar()
        
        # –£–±–∏—Ä–∞–µ–º —Ç—É–ª–±–∞—Ä - –Ω–µ –Ω—É–∂–µ–Ω
        # self.create_toolbar()
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–∞–±–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        tabs_container = QWidget()
        tabs_layout = QHBoxLayout(tabs_container)
        tabs_layout.setContentsMargins(0, 0, 0, 0)
        tabs_layout.setSpacing(5)
        
        # –í–∫–ª–∞–¥–∫–∏ (–æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å)
        self.tab_widget = QTabWidget()
        self.tab_widget.setTabPosition(QTabWidget.TabPosition.North)
        self.tab_widget.setMovable(False)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.orders_view = OrdersView(self.db_session)
        self.new_order_view = NewOrderView(self.db_session)
        self.catalogs_view = CatalogsView(self.db_session)
        self.settings_view = SettingsView()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tab_widget.addTab(self.orders_view, 'üìã –ó–∞–∫–∞–∑—ã')
        self.tab_widget.addTab(self.new_order_view, '‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑')
        self.tab_widget.addTab(self.catalogs_view, 'üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏')
        self.tab_widget.addTab(self.settings_view, '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        
        tabs_layout.addWidget(self.tab_widget)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        self.create_quick_actions_panel()
        tabs_layout.addWidget(self.quick_actions_widget)
        
        main_layout.addWidget(tabs_container)
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.create_status_bar()
        
    def style_tabs(self):
        """–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫"""
        self.tab_widget.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #bdc3c7;
                background-color: white;
                border-radius: 4px;
            }
            QTabBar::tab {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f8f9fa, stop:1 #e9ecef);
                border: 1px solid #bdc3c7;
                padding: 12px 20px;
                margin-right: 2px;
                font-weight: bold;
                border-top-left-radius: 6px;
                border-top-right-radius: 6px;
                min-width: 120px;
            }
            QTabBar::tab:selected {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #3498db, stop:1 #2980b9);
                color: white;
                border-bottom: none;
            }
            QTabBar::tab:hover:!selected {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ecf0f1, stop:1 #d5dbdb);
            }
            QTabBar::tab:first {
                margin-left: 0;
            }
        """)
        
    def create_menu_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é"""
        menubar = self.menuBar()
        
        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu = QMenu('&–§–∞–π–ª', self)
        menubar.addMenu(file_menu)
        
        file_menu.addSeparator()
        
        import_action = QAction('&–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...', self)
        import_action.setShortcut(QKeySequence('Ctrl+I'))
        import_action.triggered.connect(self.import_data)
        file_menu.addAction(import_action)
        
        export_action = QAction('&–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...', self)
        export_action.setShortcut(QKeySequence('Ctrl+E'))
        export_action.triggered.connect(self.export_data)
        file_menu.addAction(export_action)
        
        file_menu.addSeparator()
        
        exit_action = QAction('&–í—ã—Ö–æ–¥', self)
        exit_action.setShortcut(QKeySequence.Quit)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # –ú–µ–Ω—é –°–µ—Ä–≤–∏—Å
        service_menu = QMenu('&–°–µ—Ä–≤–∏—Å', self)
        menubar.addMenu(service_menu)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç–æ–π
        salary_action = QAction('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç–æ–π', self)
        salary_action.triggered.connect(self.manage_salary)
        service_menu.addAction(salary_action)
        
        service_menu.addSeparator()
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤
        clients_action = QAction('–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã', self)
        clients_action.triggered.connect(self.show_all_clients)
        service_menu.addAction(clients_action)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        cars_action = QAction('–í—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏', self)
        cars_action.triggered.connect(self.show_all_cars)
        service_menu.addAction(cars_action)
        
        service_menu.addSeparator()
        
        # –ò–º–ø–æ—Ä—Ç —É—Å–ª—É–≥
        import_services_action = QAction('–ò–º–ø–æ—Ä—Ç —É—Å–ª—É–≥', self)
        import_services_action.triggered.connect(self.import_services)
        service_menu.addAction(import_services_action)
        
        # –ú–µ–Ω—é –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools_menu = QMenu('&–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', self)
        menubar.addMenu(tools_menu)
        
        calendar_action = QAction('&–ö–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–ø–∏—Å–µ–π', self)
        calendar_action.setShortcut(QKeySequence('Ctrl+K'))
        calendar_action.triggered.connect(self.show_calendar)
        tools_menu.addAction(calendar_action)
        
        reports_action = QAction('&–û—Ç—á–µ—Ç—ã', self)
        reports_action.setShortcut(QKeySequence('Ctrl+R'))
        reports_action.triggered.connect(self.show_reports)
        tools_menu.addAction(reports_action)
        
        search_action = QAction('&–ü–æ–∏—Å–∫', self)
        search_action.setShortcut(QKeySequence('Ctrl+F'))
        search_action.triggered.connect(self.show_search)
        tools_menu.addAction(search_action)
        
        tools_menu.addSeparator()
        
        backup_action = QAction('&–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ', self)
        backup_action.triggered.connect(self.backup_database)
        tools_menu.addAction(backup_action)
        
        # –ú–µ–Ω—é –°–ø—Ä–∞–≤–∫–∞
        help_menu = QMenu('&–°–ø—Ä–∞–≤–∫–∞', self)
        menubar.addMenu(help_menu)
        
        about_action = QAction('&–û –ø—Ä–æ–≥—Ä–∞–º–º–µ', self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
        
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.status_label = QLabel('–ì–æ—Ç–æ–≤')
        self.status_bar.addWidget(self.status_label)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã
        self.user_label = QLabel('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
        self.status_bar.addPermanentWidget(self.user_label)
        
        self.status_bar.addPermanentWidget(QLabel(' | '))
        
        self.time_label = QLabel()
        self.update_time()
        self.status_bar.addPermanentWidget(self.time_label)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        self.time_timer = QTimer()
        self.time_timer.timeout.connect(self.update_time)
        self.time_timer.start(1000)
        
def create_quick_actions_panel(self):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ç–∞–±–æ–≤"""
    self.quick_actions_widget = QWidget()
    self.quick_actions_widget.setMaximumWidth(200)
    self.quick_actions_widget.setMinimumWidth(180)
    
    layout = QHBoxLayout(self.quick_actions_widget)
    layout.setContentsMargins(5, 5, 5, 5)
    layout.setSpacing(3)
    
    # –ü–æ–∏—Å–∫
    self.search_btn = QPushButton("üîç")
    self.search_btn.setStyleSheet("""
        QPushButton {
            background-color: #9b59b6;
            color: white;
            font-weight: bold;
            padding: 6px 10px;
            border-radius: 3px;
            border: none;
            font-size: 11px;
            min-width: 32px;
            max-width: 32px;
            min-height: 28px;
            max-height: 28px;
        }
        QPushButton:hover {
            background-color: #af7ac5;
        }
        QPushButton:disabled {
            background-color: #95a5a6;
            color: #7f8c8d;
        }
    """)
    self.search_btn.setToolTip("–ü–æ–∏—Å–∫ (Ctrl+F)")
    layout.addWidget(self.search_btn)
    
    # –ö–∞–ª–µ–Ω–¥–∞—Ä—å
    self.calendar_btn = QPushButton("üìÖ")
    self.calendar_btn.setStyleSheet("""
        QPushButton {
            background-color: #3498db;
            color: white;
            font-weight: bold;
            padding: 6px 10px;
            border-radius: 3px;
            border: none;
            font-size: 11px;
            min-width: 32px;
            max-width: 32px;
            min-height: 28px;
            max-height: 28px;
        }
        QPushButton:hover {
            background-color: #5dade2;
        }
        QPushButton:disabled {
            background-color: #95a5a6;
            color: #7f8c8d;
        }
    """)
    self.calendar_btn.setToolTip("–ö–∞–ª–µ–Ω–¥–∞—Ä—å (Ctrl+K)")
    layout.addWidget(self.calendar_btn)
    
    # –û—Ç—á—ë—Ç—ã
    self.reports_btn = QPushButton("üìä")
    self.reports_btn.setStyleSheet("""
        QPushButton {
            background-color: #e67e22;
            color: white;
            font-weight: bold;
            padding: 6px 10px;
            border-radius: 3px;
            border: none;
            font-size: 11px;
            min-width: 32px;
            max-width: 32px;
            min-height: 28px;
            max-height: 28px;
        }
        QPushButton:hover {
            background-color: #f39c12;
        }
        QPushButton:disabled {
            background-color: #95a5a6;
            color: #7f8c8d;
        }
    """)
    self.reports_btn.setToolTip("–û—Ç—á—ë—Ç—ã (Ctrl+R)")
    layout.addWidget(self.reports_btn)
    
    # –ü–µ—á–∞—Ç—å
    self.print_btn = QPushButton("üñ®Ô∏è")
    self.print_btn.setStyleSheet("""
        QPushButton {
            background-color: #34495e;
            color: white;
            font-weight: bold;
            padding: 6px 10px;
            border-radius: 3px;
            border: none;
            font-size: 11px;
            min-width: 32px;
            max-width: 32px;
            min-height: 28px;
            max-height: 28px;
        }
        QPushButton:hover {
            background-color: #5d6d7e;
        }
        QPushButton:disabled {
            background-color: #95a5a6;
            color: #7f8c8d;
        }
    """)
    self.print_btn.setToolTip("–ü–µ—á–∞—Ç—å")
    layout.addWidget(self.print_btn)
    
    # PDF
    self.pdf_btn = QPushButton("üìÑ")
    self.pdf_btn.setStyleSheet("""
        QPushButton {
            background-color: #c0392b;
            color: white;
            font-weight: bold;
            padding: 6px 10px;
            border-radius: 3px;
            border: none;
            font-size: 11px;
            min-width: 32px;
            max-width: 32px;
            min-height: 28px;
            max-height: 28px;
        }
        QPushButton:hover {
            background-color: #e74c3c;
        }
        QPushButton:disabled {
            background-color: #95a5a6;
            color: #7f8c8d;
        }
    """)
    self.pdf_btn.setToolTip("–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF")
    layout.addWidget(self.pdf_btn)
    
    layout.addStretch()        
        
    def update_time(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"""
        current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        self.time_label.setText(current_time)
        
    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –°–≤—è–∑—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –≤–∫–ª–∞–¥–æ–∫
        self.orders_view.status_message.connect(self.show_status_message)
        self.new_order_view.status_message.connect(self.show_status_message)
        self.new_order_view.order_saved.connect(self.on_order_saved)
        
        # –°–∏–≥–Ω–∞–ª—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_view.theme_changed.connect(self.change_theme)
        self.settings_view.language_changed.connect(self.change_language)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞—Å—Ç–æ–º–Ω–æ–º —Ç–∞–±-–≤–∏–¥–∂–µ—Ç–µ
        if hasattr(self.tab_widget, 'search_btn'):
            self.tab_widget.search_btn.clicked.connect(self.show_search)
        if hasattr(self.tab_widget, 'calendar_btn'):
            self.tab_widget.calendar_btn.clicked.connect(self.show_calendar)
        if hasattr(self.tab_widget, 'reports_btn'):
            self.tab_widget.reports_btn.clicked.connect(self.show_reports)
        if hasattr(self.tab_widget, 'salary_btn'):
            self.tab_widget.salary_btn.clicked.connect(self.manage_salary)
        if hasattr(self.tab_widget, 'clients_btn'):
            self.tab_widget.clients_btn.clicked.connect(self.show_all_clients)
            
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if hasattr(self, 'search_btn'):
            self.search_btn.clicked.connect(self.show_search)
        if hasattr(self, 'calendar_btn'):
            self.calendar_btn.clicked.connect(self.show_calendar)
        if hasattr(self, 'reports_btn'):
            self.reports_btn.clicked.connect(self.show_reports)
        if hasattr(self, 'print_btn'):
            self.print_btn.clicked.connect(self.print_current)
        if hasattr(self, 'pdf_btn'):
            self.pdf_btn.clicked.connect(self.export_pdf) 
            
    def new_order(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        if hasattr(self, 'tab_widget') and hasattr(self, 'new_order_view'):
            self.tab_widget.setCurrentWidget(self.new_order_view)
            if hasattr(self.new_order_view, 'clear_form'):
                self.new_order_view.clear_form()

    def on_order_saved(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        if hasattr(self, 'orders_view'):
            self.orders_view.refresh_orders()
            self.tab_widget.setCurrentWidget(self.orders_view)            
        
    def show_status_message(self, message, timeout=3000):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"""
        self.status_bar.showMessage(message, timeout)
        
    def on_order_saved(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
        self.orders_view.refresh_orders()
        self.tab_widget.setCurrentWidget(self.orders_view)
        
    def show_search(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–∏—Å–∫–∞"""
        try:
            from .dialogs.search_dialog import SearchDialog
            dialog = SearchDialog(self, self.db_session)
            dialog.exec()
        except Exception as e:
            QMessageBox.information(self, '–ü–æ–∏—Å–∫', f'–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n{str(e)}')

    def show_calendar(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∑–∞–ø–∏—Å–µ–π"""
        try:
            from .dialogs.calendar_dialog import CalendarDialog
            dialog = CalendarDialog(self.db_session, self)
            dialog.exec()
        except Exception as e:
            QMessageBox.information(self, '–ö–∞–ª–µ–Ω–¥–∞—Ä—å', f'–ö–∞–ª–µ–Ω–¥–∞—Ä—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n{str(e)}')

    def show_reports(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –æ—Ç—á–µ—Ç–æ–≤"""
        try:
            from .dialogs.reports_dialog import ReportsDialog
            dialog = ReportsDialog(self.db_session, self)
            dialog.exec()
        except Exception as e:
            QMessageBox.information(self, '–û—Ç—á—ë—Ç—ã', f'–û—Ç—á—ë—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n{str(e)}')
        
    def manage_salary(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç–æ–π"""
        from .dialogs.salary_dialog import SalaryDialog
        try:
            dialog = SalaryDialog(self.db_session, self)
            dialog.exec()
        except Exception as e:
            QMessageBox.information(self, '–ó–∞—Ä–ø–ª–∞—Ç–∞', f'–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n{str(e)}')
        
    def show_all_clients(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        from .dialogs.clients_list_dialog import ClientsListDialog
        try:
            dialog = ClientsListDialog(self.db_session, self)
            dialog.exec()
        except Exception as e:
            QMessageBox.information(self, '–ö–ª–∏–µ–Ω—Ç—ã', f'–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n{str(e)}')
        
    def show_all_cars(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏"""
        from .dialogs.cars_list_dialog import CarsListDialog
        try:
            dialog = CarsListDialog(self.db_session, self)
            dialog.exec()
        except Exception as e:
            QMessageBox.information(self, '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏', f'–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n{str(e)}')
        
    def import_services(self):
        """–ò–º–ø–æ—Ä—Ç —É—Å–ª—É–≥"""
        from .dialogs.import_services_dialog import ImportServicesDialog
        try:
            dialog = ImportServicesDialog(self.db_session, self)
            if dialog.exec():
                self.catalogs_view.refresh_data()
                QMessageBox.information(self, '–£—Å–ø–µ—Ö', '–£—Å–ª—É–≥–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ')
        except Exception as e:
            QMessageBox.information(self, '–ò–º–ø–æ—Ä—Ç —É—Å–ª—É–≥', f'–ò–º–ø–æ—Ä—Ç —É—Å–ª—É–≥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n{str(e)}')
        
    def print_current(self):
        """–ü–µ—á–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        current_widget = self.tab_widget.currentWidget()
        if hasattr(current_widget, 'print_document'):
            current_widget.print_document()
        else:
            QMessageBox.information(self, '–ü–µ—á–∞—Ç—å', '–ü–µ—á–∞—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏')
            
    def export_pdf(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF"""
        current_widget = self.tab_widget.currentWidget()
        if hasattr(current_widget, 'export_pdf'):
            current_widget.export_pdf()
        else:
            QMessageBox.information(self, '–≠–∫—Å–ø–æ—Ä—Ç PDF', '–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏')
            
    def import_data(self):
        """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from .dialogs.import_export_dialog import ImportDialog
            dialog = ImportDialog(self, self.db_session)
            if dialog.exec():
                self.refresh_all_views()
        except Exception as e:
            QMessageBox.information(self, '–ò–º–ø–æ—Ä—Ç', f'–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n{str(e)}')
            
    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from .dialogs.import_export_dialog import ExportDialog
            dialog = ExportDialog(self, self.db_session)
            dialog.exec()
        except Exception as e:
            QMessageBox.information(self, '–≠–∫—Å–ø–æ—Ä—Ç', f'–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n{str(e)}')
        
    def backup_database(self):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î"""
        try:
            from .utils.backup import BackupManager
            backup_manager = BackupManager()
            if backup_manager.create_backup():
                QMessageBox.information(self, '–£—Å–ø–µ—Ö', '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
            else:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é')
        except Exception as e:
            QMessageBox.information(self, '–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ', f'–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n{str(e)}')
            
    def change_theme(self, theme_name):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É"""
        self.settings.setValue('theme', theme_name)
        self.theme_changed.emit(theme_name)
            
    def change_language(self, language):
        """–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"""
        self.settings.setValue('language', language)
        self.language_changed.emit(language)
        
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        try:
            dialog = AboutDialog(self)
            dialog.exec()
        except Exception as e:
            QMessageBox.information(self, '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ', '–°–¢–û Management System v3.0\n\n–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–º')
        
    def refresh_all_views(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        self.orders_view.refresh_orders()
        self.catalogs_view.refresh_data()
        
    def autosave(self):
        """–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –µ—Å–ª–∏ –æ–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.tab_widget.currentWidget() == self.new_order_view:
            if hasattr(self.new_order_view, 'save_draft'):
                self.new_order_view.save_draft()
            
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –†–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—è –æ–∫–Ω–∞
        geometry = self.settings.value('geometry')
        if geometry:
            self.restoreGeometry(geometry)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞
        state = self.settings.value('windowState')
        if state:
            self.restoreState(state)
            
        # –¢–µ–º–∞
        theme = self.settings.value('theme', 'light')
        self.change_theme(theme)
        
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        self.settings.setValue('geometry', self.saveGeometry())
        self.settings.setValue('windowState', self.saveState())
        
def import_data(self):
    """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from .dialogs.import_export_dialog import ImportDialog
        dialog = ImportDialog(self, self.db_session)
        if dialog.exec():
            self.refresh_all_views()
    except Exception as e:
        QMessageBox.information(self, '–ò–º–ø–æ—Ä—Ç', f'–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n{str(e)}')

def export_data(self):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from .dialogs.import_export_dialog import ExportDialog
        dialog = ExportDialog(self, self.db_session)
        dialog.exec()
    except Exception as e:
        QMessageBox.information(self, '–≠–∫—Å–ø–æ—Ä—Ç', f'–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n{str(e)}')

def backup_database(self):
    """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î"""
    try:
        from .utils.backup import BackupManager
        backup_manager = BackupManager()
        if backup_manager.create_backup():
            QMessageBox.information(self, '–£—Å–ø–µ—Ö', '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
        else:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é')
    except Exception as e:
        QMessageBox.information(self, '–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ', f'–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n{str(e)}')

    def change_theme(self, theme_name):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É"""
        self.settings.setValue('theme', theme_name)
        self.theme_changed.emit(theme_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å—ã –≤ –º–µ–Ω—é
        if hasattr(self, 'theme_action_group'):
            for i, action in enumerate(self.theme_action_group):
                action.setChecked(i == 0 if theme_name == 'light' else i == 1)

    def change_language(self, language):
        """–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"""
        self.settings.setValue('language', language)
        self.language_changed.emit(language)
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

    def toggle_fullscreen(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º"""
        if self.isFullScreen():
            self.showNormal()
        else:
            self.showFullScreen()

    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        QMessageBox.information(self, '–°–ø—Ä–∞–≤–∫–∞', '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏')

    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        try:
            dialog = AboutDialog(self)
            dialog.exec()
        except Exception as e:
            QMessageBox.information(self, '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ', '–°–¢–û Management System v3.0\n\n–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–º')

    def refresh_all_views(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        try:
            if hasattr(self, 'orders_view'):
                self.orders_view.refresh_orders()
            if hasattr(self, 'catalogs_view'):
                self.catalogs_view.refresh_data()
        except Exception as e:
            pass

    def autosave(self):
        """–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –µ—Å–ª–∏ –æ–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            if hasattr(self, 'tab_widget') and hasattr(self, 'new_order_view'):
                if self.tab_widget.currentWidget() == self.new_order_view:
                    if hasattr(self.new_order_view, 'save_draft'):
                        self.new_order_view.save_draft()
        except Exception as e:
            pass

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –†–∞–∑–º–µ—Ä –∏ –ø–æ–∑–∏—Ü–∏—è –æ–∫–Ω–∞
            geometry = self.settings.value('geometry')
            if geometry:
                self.restoreGeometry(geometry)
            
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞
            state = self.settings.value('windowState')
            if state:
                self.restoreState(state)
                
            # –¢–µ–º–∞
            theme = self.settings.value('theme', 'light')
            self.change_theme(theme)
        except Exception as e:
            pass

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            self.settings.setValue('geometry', self.saveGeometry())
            self.settings.setValue('windowState', self.saveState())
        except Exception as e:
            pass  

    def show_status_message(self, message, timeout=3000):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"""
        if hasattr(self, 'status_bar'):
            self.status_bar.showMessage(message, timeout)

    def import_data(self):
        """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from .dialogs.import_export_dialog import ImportDialog
            dialog = ImportDialog(self, self.db_session)
            if dialog.exec():
                self.refresh_all_views()
        except Exception as e:
            QMessageBox.information(self, '–ò–º–ø–æ—Ä—Ç', f'–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n{str(e)}')

    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from .dialogs.import_export_dialog import ExportDialog
            dialog = ExportDialog(self, self.db_session)
            dialog.exec()
        except Exception as e:
            QMessageBox.information(self, '–≠–∫—Å–ø–æ—Ä—Ç', f'–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n{str(e)}')

    def backup_database(self):
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î"""
        try:
            from .utils.backup import BackupManager
            backup_manager = BackupManager()
            if backup_manager.create_backup():
                QMessageBox.information(self, '–£—Å–ø–µ—Ö', '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
            else:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é')
        except Exception as e:
            QMessageBox.information(self, '–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ', f'–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n{str(e)}')

    def change_theme(self, theme_name):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É"""
        self.settings.setValue('theme', theme_name)
        self.theme_changed.emit(theme_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å—ã –≤ –º–µ–Ω—é
        if hasattr(self, 'theme_action_group'):
            for i, action in enumerate(self.theme_action_group):
                action.setChecked(i == 0 if theme_name == 'light' else i == 1)

    def change_language(self, language):
        """–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"""
        self.settings.setValue('language', language)
        self.language_changed.emit(language)

    def toggle_fullscreen(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º"""
        if self.isFullScreen():
            self.showNormal()
        else:
            self.showFullScreen()

    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        QMessageBox.information(self, '–°–ø—Ä–∞–≤–∫–∞', '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏')

    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        try:
            dialog = AboutDialog(self)
            dialog.exec()
        except Exception as e:
            QMessageBox.information(self, '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ', '–°–¢–û Management System v3.0\n\n–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å–æ–º')

    def refresh_all_views(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
        try:
            if hasattr(self, 'orders_view'):
                self.orders_view.refresh_orders()
            if hasattr(self, 'catalogs_view'):
                self.catalogs_view.refresh_data()
        except Exception as e:
            pass

    def autosave(self):
        """–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        try:
            if hasattr(self, 'tab_widget') and hasattr(self, 'new_order_view'):
                if self.tab_widget.currentWidget() == self.new_order_view:
                    if hasattr(self.new_order_view, 'save_draft'):
                        self.new_order_view.save_draft()
        except Exception as e:
            pass

    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            geometry = self.settings.value('geometry')
            if geometry:
                self.restoreGeometry(geometry)
            
            state = self.settings.value('windowState')
            if state:
                self.restoreState(state)
                
            theme = self.settings.value('theme', 'light')
            self.change_theme(theme)
        except Exception as e:
            pass

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            self.settings.setValue('geometry', self.saveGeometry())
            self.settings.setValue('windowState', self.saveState())
        except Exception as e:
            pass         
        
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if hasattr(self.new_order_view, 'has_unsaved_changes') and self.new_order_view.has_unsaved_changes():
            reply = QMessageBox.question(
                self, '–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                '–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º?',
                QMessageBox.Save | QMessageBox.Discard | QMessageBox.Cancel
            )
            
            if reply == QMessageBox.Save:
                if hasattr(self.new_order_view, 'save_order'):
                    self.new_order_view.save_order()
            elif reply == QMessageBox.Cancel:
                event.ignore()
                return
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.save_settings()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        self.db_session.close()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        self.time_timer.stop()
        self.autosave_timer.stop()
        
        event.accept()