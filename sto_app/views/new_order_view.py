# sto_app/views/new_order_view.py
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QFormLayout, 
                              QLineEdit, QTextEdit, QComboBox, QSpinBox, QDoubleSpinBox,
                              QPushButton, QLabel, QDateTimeEdit, QGroupBox, QTableWidget,
                              QTableWidgetItem, QHeaderView, QMessageBox, QSplitter,
                              QFrame, QCheckBox, QCompleter, QProgressBar, QDialog)
from PySide6.QtCore import Qt, Signal, QDateTime, QStringListModel, QTimer
from PySide6.QtGui import QFont, QIcon, QDoubleValidator, QIntValidator
from sto_app.models_sto import OrderService, OrderPart
from sqlalchemy.orm import Session
from sqlalchemy import or_, and_
from datetime import datetime
import logging
import json

from shared_models.common_models import Client, Car, Employee
from sto_app.models_sto import Order, OrderService, OrderPart, ServiceCatalog, CarBrand, OrderStatus
from sto_app.dialogs.client_dialog import ClientDialog
from sto_app.dialogs.car_dialog import CarDialog
from sto_app.dialogs.service_dialog import ServiceDialog
from sto_app.dialogs.part_dialog import PartDialog


logger = logging.getLogger(__name__)


class NewOrderView(QWidget):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    
    status_message = Signal(str, int)
    order_saved = Signal()
    
    def __init__(self, db_session: Session):
        super().__init__()
        self.db_session = db_session
        self.current_order = None
        self.is_editing = False
        self.unsaved_changes = False
        
        self.setup_ui()
        self.load_initial_data()
        self.setup_connections()
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        self.autosave_timer = QTimer()
        self.autosave_timer.timeout.connect(self.save_draft)
        self.autosave_timer.start(60000)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = QLabel('üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥')
        title_font = QFont()
        title_font.setPointSize(16)
        title_font.setBold(True)
        self.title_label.setFont(title_font)
        layout.addWidget(self.title_label)
        
        # –°–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —É—Å–ª—É–≥/–∑–∞–ø—á–∞—Å—Ç–µ–π
        splitter = QSplitter(Qt.Vertical)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        top_panel = self.create_order_info_panel()
        splitter.addWidget(top_panel)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å —Å —É—Å–ª—É–≥–∞–º–∏ –∏ –∑–∞–ø—á–∞—Å—Ç—è–º–∏
        bottom_panel = self.create_services_parts_panel()
        splitter.addWidget(bottom_panel)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏: –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - 40%, —É—Å–ª—É–≥–∏/–∑–∞–ø—á–∞—Å—Ç–∏ - 60%
        splitter.setSizes([300, 450])
        
        layout.addWidget(splitter)
        
        # –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π
        actions_layout = self.create_actions_panel()
        layout.addLayout(actions_layout)
        
    def create_order_info_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞"""
        panel = QFrame()
        panel.setFrameStyle(QFrame.StyledPanel)
        panel_layout = QVBoxLayout(panel)
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è –ª–µ–≤–æ–π –∏ –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏
        h_splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
        order_group = QGroupBox('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ')
        order_layout = QFormLayout(order_group)
        
        # –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        self.order_number_edit = QLineEdit()
        self.order_number_edit.setPlaceholderText('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...')
        self.order_number_edit.setReadOnly(True)
        order_layout.addRow('‚Ññ –∑–∞–∫–∞–∑–∞:', self.order_number_edit)
        
        # –î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞
        self.date_received_edit = QDateTimeEdit()
        self.date_received_edit.setDateTime(QDateTime.currentDateTime())
        self.date_received_edit.setCalendarPopup(True)
        order_layout.addRow('–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞:', self.date_received_edit)
        
        # –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏
        self.date_delivery_edit = QDateTimeEdit()
        self.date_delivery_edit.setDateTime(QDateTime.currentDateTime().addDays(1))
        self.date_delivery_edit.setCalendarPopup(True)
        order_layout.addRow('–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:', self.date_delivery_edit)
        
        # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
        self.responsible_combo = QComboBox()
        self.responsible_combo.setEditable(True)
        order_layout.addRow('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π:', self.responsible_combo)
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä
        self.manager_combo = QComboBox()
        self.manager_combo.setEditable(True)
        order_layout.addRow('–ú–µ–Ω–µ–¥–∂–µ—Ä:', self.manager_combo)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_combo = QComboBox()
        self.status_combo.addItems([status.value for status in OrderStatus])
        order_layout.addRow('–°—Ç–∞—Ç—É—Å:', self.status_combo)
        
        h_splitter.addWidget(order_group)
        
        # –ü—Ä–∞–≤–∞—è –≥—Ä—É–ø–ø–∞ - –∫–ª–∏–µ–Ω—Ç –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        client_car_widget = QWidget()
        client_car_layout = QVBoxLayout(client_car_widget)
        
        # –ì—Ä—É–ø–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞
        client_group = QGroupBox('üë§ –ö–ª–∏–µ–Ω—Ç')
        client_layout = QVBoxLayout(client_group)
        
        # –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
        client_search_layout = QHBoxLayout()
        self.client_search_edit = QLineEdit()
        self.client_search_edit.setPlaceholderText('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω...')
        client_search_layout.addWidget(self.client_search_edit)
        
        self.new_client_btn = QPushButton('‚ûï')
        self.new_client_btn.setToolTip('–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç')
        self.new_client_btn.setMaximumWidth(40)
        client_search_layout.addWidget(self.new_client_btn)
        
        client_layout.addLayout(client_search_layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ
        self.client_info_label = QLabel('–ö–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω')
        self.client_info_label.setStyleSheet('color: #666; font-style: italic;')
        client_layout.addWidget(self.client_info_label)
        
        client_car_layout.addWidget(client_group)
        
        # –ì—Ä—É–ø–ø–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        car_group = QGroupBox('üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å')
        car_layout = QVBoxLayout(car_group)
        
        # –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        car_search_layout = QHBoxLayout()
        self.car_search_edit = QLineEdit()
        self.car_search_edit.setPlaceholderText('–í–≤–µ–¥–∏—Ç–µ VIN –∏–ª–∏ –≥–æ—Å. –Ω–æ–º–µ—Ä...')
        car_search_layout.addWidget(self.car_search_edit)
        
        self.new_car_btn = QPushButton('‚ûï')
        self.new_car_btn.setToolTip('–ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å')
        self.new_car_btn.setMaximumWidth(40)
        car_search_layout.addWidget(self.new_car_btn)
        
        car_layout.addLayout(car_search_layout)
        
        # –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        car_quick_layout = QFormLayout()
        
        self.car_brand_combo = QComboBox()
        self.car_brand_combo.setEditable(True)
        car_quick_layout.addRow('–ú–∞—Ä–∫–∞:', self.car_brand_combo)
        
        self.car_model_combo = QComboBox()
        self.car_model_combo.setEditable(True)
        car_quick_layout.addRow('–ú–æ–¥–µ–ª—å:', self.car_model_combo)
        
        self.car_year_spin = QSpinBox()
        self.car_year_spin.setRange(1950, 2030)
        self.car_year_spin.setValue(datetime.now().year)
        car_quick_layout.addRow('–ì–æ–¥:', self.car_year_spin)
        
        self.car_vin_edit = QLineEdit()
        self.car_vin_edit.setPlaceholderText('17 —Å–∏–º–≤–æ–ª–æ–≤')
        self.car_vin_edit.setMaxLength(17)
        car_quick_layout.addRow('VIN:', self.car_vin_edit)
        
        self.car_plate_edit = QLineEdit()
        self.car_plate_edit.setPlaceholderText('AA1234BB')
        car_quick_layout.addRow('–ì–æ—Å. –Ω–æ–º–µ—Ä:', self.car_plate_edit)
        
        car_layout.addLayout(car_quick_layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        self.car_info_label = QLabel('–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω')
        self.car_info_label.setStyleSheet('color: #666; font-style: italic;')
        car_layout.addWidget(self.car_info_label)
        
        client_car_layout.addWidget(car_group)
        
        h_splitter.addWidget(client_car_widget)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        h_splitter.setSizes([400, 500])
        
        panel_layout.addWidget(h_splitter)
        
        # –ì—Ä—É–ø–ø–∞ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π
        notes_group = QGroupBox('üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è')
        notes_layout = QVBoxLayout(notes_group)
        
        self.notes_edit = QTextEdit()
        self.notes_edit.setMaximumHeight(80)
        self.notes_edit.setPlaceholderText('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ...')
        notes_layout.addWidget(self.notes_edit)
        
        panel_layout.addWidget(notes_group)
        
        return panel
        
    def create_services_parts_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É—Å–ª—É–≥ –∏ –∑–∞–ø—á–∞—Å—Ç–µ–π"""
        panel = QFrame()
        panel.setFrameStyle(QFrame.StyledPanel)
        panel_layout = QVBoxLayout(panel)
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è —É—Å–ª—É–≥ –∏ –∑–∞–ø—á–∞—Å—Ç–µ–π
        h_splitter = QSplitter(Qt.Horizontal)
        
        # –ü–∞–Ω–µ–ª—å —É—Å–ª—É–≥
        services_panel = self.create_services_panel()
        h_splitter.addWidget(services_panel)
        
        # –ü–∞–Ω–µ–ª—å –∑–∞–ø—á–∞—Å—Ç–µ–π
        parts_panel = self.create_parts_panel()
        h_splitter.addWidget(parts_panel)
        
        # –ü–∞–Ω–µ–ª—å –∏—Ç–æ–≥–æ–≤
        totals_panel = self.create_totals_panel()
        
        panel_layout.addWidget(h_splitter)
        panel_layout.addWidget(totals_panel)
        
        return panel
        
    def create_services_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É—Å–ª—É–≥"""
        services_group = QGroupBox('üîß –£—Å–ª—É–≥–∏')
        services_layout = QVBoxLayout(services_group)
        
        # –ü–∞–Ω–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
        add_service_layout = QHBoxLayout()
        
        self.service_search_edit = QLineEdit()
        self.service_search_edit.setPlaceholderText('–ü–æ–∏—Å–∫ —É—Å–ª—É–≥–∏...')
        add_service_layout.addWidget(self.service_search_edit)
        
        self.add_service_btn = QPushButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å')
        self.add_service_btn.clicked.connect(self.add_service)
        add_service_layout.addWidget(self.add_service_btn)
        
        services_layout.addLayout(add_service_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ —É—Å–ª—É–≥
        self.services_table = QTableWidget()
        self.services_table.setColumnCount(4)
        self.services_table.setHorizontalHeaderLabels(['–£—Å–ª—É–≥–∞', '–¶–µ–Ω–∞', '–° –ù–î–°', '–î–µ–π—Å—Ç–≤–∏—è'])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ª—É–≥
        services_header = self.services_table.horizontalHeader()
        services_header.setStretchLastSection(False)
        services_header.setSectionResizeMode(0, QHeaderView.Stretch)
        services_header.setSectionResizeMode(1, QHeaderView.Fixed)
        services_header.setSectionResizeMode(2, QHeaderView.Fixed)
        services_header.setSectionResizeMode(3, QHeaderView.Fixed)
        
        self.services_table.setColumnWidth(1, 100)
        self.services_table.setColumnWidth(2, 100)
        self.services_table.setColumnWidth(3, 80)
        
        self.services_table.setAlternatingRowColors(True)
        self.services_table.setSelectionBehavior(QTableWidget.SelectRows)
        
        services_layout.addWidget(self.services_table)
        
        return services_group
        
    def create_parts_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∑–∞–ø—á–∞—Å—Ç–µ–π"""
        parts_group = QGroupBox('üî© –ó–∞–ø—á–∞—Å—Ç–∏')
        parts_layout = QVBoxLayout(parts_group)
        
        # –ü–∞–Ω–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç–∏
        add_part_layout = QHBoxLayout()
        
        self.part_search_edit = QLineEdit()
        self.part_search_edit.setPlaceholderText('–ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–∏...')
        add_part_layout.addWidget(self.part_search_edit)
        
        self.add_part_btn = QPushButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å')
        self.add_part_btn.clicked.connect(self.add_part)
        add_part_layout.addWidget(self.add_part_btn)
        
        parts_layout.addLayout(add_part_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π
        self.parts_table = QTableWidget()
        self.parts_table.setColumnCount(6)
        self.parts_table.setHorizontalHeaderLabels(['–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ö–æ–ª-–≤–æ', '–¶–µ–Ω–∞', '–°—É–º–º–∞', '–î–µ–π—Å—Ç–≤–∏—è'])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø—á–∞—Å—Ç–µ–π
        parts_header = self.parts_table.horizontalHeader()
        parts_header.setStretchLastSection(False)
        parts_header.setSectionResizeMode(1, QHeaderView.Stretch)
        parts_header.setSectionResizeMode(0, QHeaderView.Fixed)
        parts_header.setSectionResizeMode(2, QHeaderView.Fixed)
        parts_header.setSectionResizeMode(3, QHeaderView.Fixed)
        parts_header.setSectionResizeMode(4, QHeaderView.Fixed)
        parts_header.setSectionResizeMode(5, QHeaderView.Fixed)
        
        self.parts_table.setColumnWidth(0, 100)
        self.parts_table.setColumnWidth(2, 80)
        self.parts_table.setColumnWidth(3, 100)
        self.parts_table.setColumnWidth(4, 100)
        self.parts_table.setColumnWidth(5, 80)
        
        self.parts_table.setAlternatingRowColors(True)
        self.parts_table.setSelectionBehavior(QTableWidget.SelectRows)
        
        parts_layout.addWidget(self.parts_table)
        
        return parts_group
        
    def create_totals_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏—Ç–æ–≥–æ–≤"""
        totals_group = QGroupBox('üí∞ –†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏')
        totals_layout = QHBoxLayout(totals_group)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∏ –¥–æ–ø–ª–∞—Ç–∞
        payments_layout = QFormLayout()
        
        self.prepayment_edit = QDoubleSpinBox()
        self.prepayment_edit.setRange(0, 999999)
        self.prepayment_edit.setDecimals(2)
        self.prepayment_edit.setSuffix(' ‚Ç¥')
        self.prepayment_edit.valueChanged.connect(self.calculate_totals)
        payments_layout.addRow('–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞:', self.prepayment_edit)
        
        self.additional_payment_edit = QDoubleSpinBox()
        self.additional_payment_edit.setRange(0, 999999)
        self.additional_payment_edit.setDecimals(2)
        self.additional_payment_edit.setSuffix(' ‚Ç¥')
        self.additional_payment_edit.valueChanged.connect(self.calculate_totals)
        payments_layout.addRow('–î–æ–ø–ª–∞—Ç–∞:', self.additional_payment_edit)
        
        totals_layout.addLayout(payments_layout)
        
        totals_layout.addStretch()
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∏—Ç–æ–≥–∏
        summary_layout = QFormLayout()
        
        self.services_total_label = QLabel('0.00 ‚Ç¥')
        self.services_total_label.setStyleSheet('font-weight: bold;')
        summary_layout.addRow('–£—Å–ª—É–≥–∏:', self.services_total_label)
        
        self.parts_total_label = QLabel('0.00 ‚Ç¥')
        self.parts_total_label.setStyleSheet('font-weight: bold;')
        summary_layout.addRow('–ó–∞–ø—á–∞—Å—Ç–∏:', self.parts_total_label)
        
        self.total_amount_label = QLabel('0.00 ‚Ç¥')
        self.total_amount_label.setStyleSheet('font-weight: bold; font-size: 14px; color: #2196F3;')
        summary_layout.addRow('–ò–¢–û–ì–û:', self.total_amount_label)
        
        self.balance_label = QLabel('0.00 ‚Ç¥')
        self.balance_label.setStyleSheet('font-weight: bold; font-size: 14px; color: #f44336;')
        summary_layout.addRow('–ö –¥–æ–ø–ª–∞—Ç–µ:', self.balance_label)
        
        totals_layout.addLayout(summary_layout)
        
        return totals_group
        
    def create_actions_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        actions_layout = QHBoxLayout()
        
        # –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        self.save_draft_btn = QPushButton('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫')
        self.save_draft_btn.clicked.connect(self.save_draft)
        actions_layout.addWidget(self.save_draft_btn)
        
        self.save_order_btn = QPushButton('‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑')
        self.save_order_btn.setProperty('accent', True)
        self.save_order_btn.clicked.connect(self.save_order)
        actions_layout.addWidget(self.save_order_btn)
        
        actions_layout.addStretch()
        
        # –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        self.print_btn = QPushButton('üñ®Ô∏è –ü–µ—á–∞—Ç—å')
        self.print_btn.clicked.connect(self.print_order)
        actions_layout.addWidget(self.print_btn)
        
        self.clear_btn = QPushButton('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å')
        self.clear_btn.setProperty('danger', True)
        self.clear_btn.clicked.connect(self.clear_form)
        actions_layout.addWidget(self.clear_btn)
        
        return actions_layout
        
    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.client_search_edit.textChanged.connect(self.on_client_search)
        self.car_search_edit.textChanged.connect(self.on_car_search)
        self.service_search_edit.returnPressed.connect(self.add_service_from_search)
        self.part_search_edit.returnPressed.connect(self.add_part_from_search)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        self.new_client_btn.clicked.connect(self.new_client)
        self.new_car_btn.clicked.connect(self.new_car)
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        self.car_brand_combo.currentTextChanged.connect(self.on_brand_changed)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        widgets_to_track = [
            self.date_received_edit, self.date_delivery_edit, self.notes_edit,
            self.prepayment_edit, self.additional_payment_edit, self.car_year_spin,
            self.car_vin_edit, self.car_plate_edit
        ]
        
        for widget in widgets_to_track:
            if hasattr(widget, 'textChanged'):
                widget.textChanged.connect(self.mark_unsaved_changes)
            elif hasattr(widget, 'valueChanged'):
                widget.valueChanged.connect(self.mark_unsaved_changes)
            elif hasattr(widget, 'dateTimeChanged'):
                widget.dateTimeChanged.connect(self.mark_unsaved_changes)
                
    def load_initial_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            employees = self.db_session.query(Employee).filter(Employee.is_active == 1).all()
            
            for combo in [self.responsible_combo, self.manager_combo]:
                combo.clear()
                combo.addItem('', None)
                for emp in employees:
                    combo.addItem(emp.name, emp.id)
                    
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            brands = self.db_session.query(CarBrand).all()
            self.car_brand_combo.clear()
            self.car_brand_combo.addItem('')
            
            for brand in brands:
                self.car_brand_combo.addItem(brand.brand, brand.id)
                
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —É—Å–ª—É–≥
            services = self.db_session.query(ServiceCatalog).filter(ServiceCatalog.is_active == 1).all()
            service_names = [service.name for service in services]
            
            service_completer = QCompleter(service_names)
            service_completer.setCaseSensitivity(Qt.CaseInsensitive)
            self.service_search_edit.setCompleter(service_completer)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            
    def on_brand_changed(self, brand_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        self.car_model_combo.clear()
        
        if not brand_name:
            return
            
        try:
            brand = self.db_session.query(CarBrand).filter(CarBrand.brand == brand_name).first()
            if brand:
                models = brand.get_models_list()
                self.car_model_combo.addItems([''] + models)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            
    def on_client_search(self, text):
        """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
        if len(text) < 2:
            self.client_info_label.setText('–ö–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω')
            return
            
        try:
            # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            clients = self.db_session.query(Client).filter(
                or_(
                    Client.name.ilike(f'%{text}%'),
                    Client.phone.ilike(f'%{text}%')
                )
            ).limit(5).all()
            
            if clients:
                client = clients[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
                self.client_info_label.setText(f'üìû {client.phone}\nüìç {client.address or ""}')
                self.selected_client = client
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞
                self.load_client_cars(client.id)
            else:
                self.client_info_label.setText('–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
                self.selected_client = None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            
    def on_car_search(self, text):
        """–ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        if len(text) < 3:
            self.car_info_label.setText('–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω')
            return
            
        try:
            # –ü–æ–∏—Å–∫ –ø–æ VIN –∏–ª–∏ –≥–æ—Å–Ω–æ–º–µ—Ä—É
            cars = self.db_session.query(Car).filter(
                or_(
                    Car.vin.ilike(f'%{text}%'),
                    Car.license_plate.ilike(f'%{text}%')
                )
            ).limit(5).all()
            
            if cars:
                car = cars[0]  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é
                self.car_info_label.setText(f'üöó {car.full_name}\nüìã VIN: {car.vin}')
                self.selected_car = car
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                self.fill_car_fields(car)
            else:
                self.car_info_label.setText('–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
                self.selected_car = None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}")
            
    def load_client_cars(self, client_id):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            cars = self.db_session.query(Car).filter(Car.client_id == client_id).all()
            if cars and len(cars) == 1:
                # –ï—Å–ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ –æ–¥–∏–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ
                car = cars[0]
                self.car_search_edit.setText(car.vin or car.license_plate or '')
                self.selected_car = car
                self.fill_car_fields(car)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            
    def fill_car_fields(self, car):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        if car.brand:
            index = self.car_brand_combo.findText(car.brand)
            if index >= 0:
                self.car_brand_combo.setCurrentIndex(index)
                
        if car.model:
            self.car_model_combo.setCurrentText(car.model)
            
        if car.year:
            self.car_year_spin.setValue(car.year)
            
        if car.vin:
            self.car_vin_edit.setText(car.vin)
            
        if car.license_plate:
            self.car_plate_edit.setText(car.license_plate)
            
    def new_client(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        dialog = ClientDialog(self)
        if dialog.exec():
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∏—Å–∫ —Å –Ω–æ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
            client = dialog.get_client()
            self.client_search_edit.setText(client.name)
            self.selected_client = client
            
    def new_car(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        if not hasattr(self, 'selected_client') or not self.selected_client:
            QMessageBox.information(self, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞')
            return
            
        dialog = CarDialog(self, self.selected_client.id)
        if dialog.exec():
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∏—Å–∫ —Å –Ω–æ–≤—ã–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º
            car = dialog.get_car()
            self.car_search_edit.setText(car.vin or car.license_plate or '')
            self.selected_car = car
            
    def add_service(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥"""
        if not self.current_order:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ order_id
            reply = QMessageBox.question(
                self, '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
                '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
                QMessageBox.Yes | QMessageBox.No
            )
            if reply == QMessageBox.Yes:
                if not self.save_draft():
                    return
            else:
                return

        dialog = ServiceDialog(self, order_id=self.current_order.id)
        dialog.service_cost_changed.connect(self.calculate_totals)
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            order_service = dialog.get_order_service()
            if order_service:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —É—Å–ª—É–≥
                self.refresh_services_table()
                self.calculate_totals()
                self.mark_unsaved_changes()
                
    def add_service_from_search(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ Enter"""
        text = self.service_search_edit.text().strip()
        if text:
            self.add_service()
            
    def add_service_to_table(self, name, price):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        row = self.services_table.rowCount()
        self.services_table.insertRow(row)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
        name_item = QTableWidgetItem(name)
        self.services_table.setItem(row, 0, name_item)
        
        # –¶–µ–Ω–∞
        price_item = QTableWidgetItem(f'{price:.2f}')
        price_item.setTextAlignment(Qt.AlignRight)
        self.services_table.setItem(row, 1, price_item)
        
        # –¶–µ–Ω–∞ —Å –ù–î–°
        price_with_vat = price * 1.2
        vat_item = QTableWidgetItem(f'{price_with_vat:.2f}')
        vat_item.setTextAlignment(Qt.AlignRight)
        self.services_table.setItem(row, 2, vat_item)
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = QPushButton('üóëÔ∏è')
        delete_btn.setMaximumWidth(30)
        delete_btn.clicked.connect(lambda: self.remove_service_row(row))
        self.services_table.setCellWidget(row, 3, delete_btn)
        
        self.calculate_totals()
        self.mark_unsaved_changes()
            
    def add_part(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥"""
        if not self.current_order:
            reply = QMessageBox.question(
                self, '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
                '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
                QMessageBox.Yes | QMessageBox.No
            )
            if reply == QMessageBox.Yes:
                if not self.save_draft():
                    return
            else:
                return

        dialog = PartDialog(self, order_id=self.current_order.id)
        dialog.part_cost_changed.connect(self.calculate_totals)
        
        if dialog.exec() == QDialog.DialogCode.Accepted:
            order_part = dialog.get_order_part()
            if order_part:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–ø—á–∞—Å—Ç–µ–π
                self.refresh_parts_table()
                self.calculate_totals()
                self.mark_unsaved_changes()
                
    def add_part_from_search(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ Enter"""
        text = self.part_search_edit.text().strip()
        if text:
            self.add_part()
            
    def add_part_to_table(self, article, name, quantity, price):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        row = self.parts_table.rowCount()
        self.parts_table.insertRow(row)
        
        # –ê—Ä—Ç–∏–∫—É–ª
        article_item = QTableWidgetItem(article or '')
        self.parts_table.setItem(row, 0, article_item)
        
        # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        name_item = QTableWidgetItem(name)
        self.parts_table.setItem(row, 1, name_item)
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        qty_item = QTableWidgetItem(str(quantity))
        qty_item.setTextAlignment(Qt.AlignCenter)
        self.parts_table.setItem(row, 2, qty_item)
        
        # –¶–µ–Ω–∞
        price_item = QTableWidgetItem(f'{price:.2f}')
        price_item.setTextAlignment(Qt.AlignRight)
        self.parts_table.setItem(row, 3, price_item)
        
        # –°—É–º–º–∞
        total = quantity * price
        total_item = QTableWidgetItem(f'{total:.2f}')
        total_item.setTextAlignment(Qt.AlignRight)
        self.parts_table.setItem(row, 4, total_item)
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = QPushButton('üóëÔ∏è')
        delete_btn.setMaximumWidth(30)
        delete_btn.clicked.connect(lambda: self.remove_part_row(row))
        self.parts_table.setCellWidget(row, 5, delete_btn)
        
        self.calculate_totals()
        self.mark_unsaved_changes()
        
    def remove_service_row(self, row):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —É—Å–ª—É–≥–∏"""
        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            '–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É?',
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.services_table.removeRow(row)
            self.calculate_totals()
            self.mark_unsaved_changes()
            
    def remove_part_row(self, row):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—á–∞—Å—Ç–∏"""
        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            '–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø—á–∞—Å—Ç—å?',
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.parts_table.removeRow(row)
            self.calculate_totals()
            self.mark_unsaved_changes()
            
    def calculate_totals(self):
        """–†–∞—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—É–º–º"""
        try:
            # –°—É–º–º–∞ —É—Å–ª—É–≥
            services_total = 0.0
            for row in range(self.services_table.rowCount()):
                price_item = self.services_table.item(row, 2)  # –¶–µ–Ω–∞ —Å –ù–î–°
                if price_item:
                    services_total += float(price_item.text())
                    
            # –°—É–º–º–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π
            parts_total = 0.0
            for row in range(self.parts_table.rowCount()):
                total_item = self.parts_table.item(row, 4)  # –°—É–º–º–∞
                if total_item:
                    parts_total += float(total_item.text())
                    
            # –û–±—â–∞—è —Å—É–º–º–∞
            total_amount = services_total + parts_total
            
            # –û—Å—Ç–∞—Ç–æ–∫ –∫ –¥–æ–ø–ª–∞—Ç–µ
            prepayment = self.prepayment_edit.value()
            additional_payment = self.additional_payment_edit.value()
            balance = total_amount - prepayment - additional_payment
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.services_total_label.setText(f'{services_total:.2f} ‚Ç¥')
            self.parts_total_label.setText(f'{parts_total:.2f} ‚Ç¥')
            self.total_amount_label.setText(f'{total_amount:.2f} ‚Ç¥')
            
            # –¶–≤–µ—Ç –æ—Å—Ç–∞—Ç–∫–∞
            if balance > 0:
                self.balance_label.setText(f'{balance:.2f} ‚Ç¥')
                self.balance_label.setStyleSheet('font-weight: bold; font-size: 14px; color: #f44336;')
            elif balance < 0:
                self.balance_label.setText(f'{abs(balance):.2f} ‚Ç¥ –ø–µ—Ä–µ–ø–ª–∞—Ç–∞')
                self.balance_label.setStyleSheet('font-weight: bold; font-size: 14px; color: #ff9800;')
            else:
                self.balance_label.setText('–û–ø–ª–∞—á–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é')
                self.balance_label.setStyleSheet('font-weight: bold; font-size: 14px; color: #4caf50;')
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –∏—Ç–æ–≥–æ–≤: {e}")
            
    def mark_unsaved_changes(self):
        """–û—Ç–º–µ—Ç–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        self.unsaved_changes = True
        title = self.title_label.text()
        if not title.endswith(' *'):
            self.title_label.setText(title + ' *')
            
    def generate_order_number(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            # –§–æ—Ä–º–∞—Ç: –°–¢–û-YYYYMMDD-NNN
            today = datetime.now()
            date_str = today.strftime('%Y%m%d')
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            pattern = f'–°–¢–û-{date_str}-%'
            last_order = self.db_session.query(Order).filter(
                Order.order_number.like(pattern)
            ).order_by(Order.order_number.desc()).first()
            
            if last_order:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º
                last_num = int(last_order.order_number.split('-')[-1])
                new_num = last_num + 1
            else:
                new_num = 1
                
            return f'–°–¢–û-{date_str}-{new_num:03d}'
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞: {e}")
            return f'–°–¢–û-{datetime.now().strftime("%Y%m%d")}-001'
            
    def save_draft(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫"""
        try:
            if not self.validate_minimal_data():
                return False
                
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
            if not self.current_order:
                self.current_order = Order()
                self.current_order.order_number = self.generate_order_number()
                self.order_number_edit.setText(self.current_order.order_number)
                
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            self.fill_order_data()
            self.current_order.status = OrderStatus.DRAFT
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self.db_session.add(self.current_order)
            self.db_session.commit()
            
            self.unsaved_changes = False
            title = self.title_label.text().replace(' *', '')
            self.title_label.setText(title)
            
            self.status_message.emit('–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω', 2000)
            return True
            
        except Exception as e:
            self.db_session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫: {e}')
            return False
            
    def save_order(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑"""
        try:
            if not self.validate_order_data():
                return False
                
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
            if not self.current_order:
                self.current_order = Order()
                self.current_order.order_number = self.generate_order_number()
                self.order_number_edit.setText(self.current_order.order_number)
                
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.fill_order_data()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            if self.status_combo.currentText():
                status_value = self.status_combo.currentText()
                for status in OrderStatus:
                    if status.value == status_value:
                        self.current_order.status = status
                        break
            else:
                self.current_order.status = OrderStatus.IN_WORK
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self.db_session.add(self.current_order)
            self.db_session.commit()
            
            self.unsaved_changes = False
            title = self.title_label.text().replace(' *', '')
            self.title_label.setText(title)
            
            self.status_message.emit(f'–ó–∞–∫–∞–∑ {self.current_order.order_number} —Å–æ—Ö—Ä–∞–Ω—ë–Ω', 3000)
            self.order_saved.emit()
            
            return True
            
        except Exception as e:
            self.db_session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑: {e}')
            return False
            
    def validate_minimal_data(self):
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
        if not hasattr(self, 'selected_client') or not self.selected_client:
            QMessageBox.warning(self, '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞')
            return False
            
        return True
        
    def validate_order_data(self):
        """–ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞"""
        if not self.validate_minimal_data():
            return False
            
        if not hasattr(self, 'selected_car') or not self.selected_car:
            QMessageBox.warning(self, '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å')
            return False
            
        if self.services_table.rowCount() == 0 and self.parts_table.rowCount() == 0:
            QMessageBox.warning(self, '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —É—Å–ª—É–≥—É –∏–ª–∏ –∑–∞–ø—á–∞—Å—Ç—å')
            return False
            
        return True
        
    def fill_order_data(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞"""
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.current_order.date_received = self.date_received_edit.dateTime().toPython()
        self.current_order.date_delivery = self.date_delivery_edit.dateTime().toPython()
        self.current_order.notes = self.notes_edit.toPlainText()
        
        # –ö–ª–∏–µ–Ω—Ç –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        if hasattr(self, 'selected_client'):
            self.current_order.client_id = self.selected_client.id
            
        if hasattr(self, 'selected_car'):
            self.current_order.car_id = self.selected_car.id
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
            self.create_car_from_form()
            
        # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –º–µ–Ω–µ–¥–∂–µ—Ä
        resp_id = self.responsible_combo.currentData()
        if resp_id:
            self.current_order.responsible_person_id = resp_id
            
        mgr_id = self.manager_combo.currentData()
        if mgr_id:
            self.current_order.manager_id = mgr_id
            
        # –ü–ª–∞—Ç–µ–∂–∏
        self.current_order.prepayment = self.prepayment_edit.value()
        self.current_order.additional_payment = self.additional_payment_edit.value()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
        services_total = float(self.services_total_label.text().replace(' ‚Ç¥', ''))
        parts_total = float(self.parts_total_label.text().replace(' ‚Ç¥', ''))
        self.current_order.total_amount = services_total + parts_total
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ª—É–≥–∏
        self.save_order_services()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—á–∞—Å—Ç–∏
        self.save_order_parts()
        
    def create_car_from_form(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã"""
        if not hasattr(self, 'selected_client'):
            return
            
        car = Car()
        car.client_id = self.selected_client.id
        car.brand = self.car_brand_combo.currentText()
        car.model = self.car_model_combo.currentText()
        car.year = self.car_year_spin.value() if self.car_year_spin.value() != datetime.now().year else None
        car.vin = self.car_vin_edit.text().strip() or None
        car.license_plate = self.car_plate_edit.text().strip() or None
        
        self.db_session.add(car)
        self.db_session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
        
        self.selected_car = car
        self.current_order.car_id = car.id
        
    def save_order_services(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ª—É–≥ –∑–∞–∫–∞–∑–∞"""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É—Å–ª—É–≥–∏
        if self.current_order.id:
            self.db_session.query(OrderService).filter(
                OrderService.order_id == self.current_order.id
            ).delete()
            
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        for row in range(self.services_table.rowCount()):
            service = OrderService()
            service.order_id = self.current_order.id
            service.service_name = self.services_table.item(row, 0).text()
            service.price = float(self.services_table.item(row, 1).text())
            service.price_with_vat = float(self.services_table.item(row, 2).text())
            
            self.db_session.add(service)
            
    def save_order_parts(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–µ–π –∑–∞–∫–∞–∑–∞"""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏
        if self.current_order.id:
            self.db_session.query(OrderPart).filter(
                OrderPart.order_id == self.current_order.id
            ).delete()
            
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        for row in range(self.parts_table.rowCount()):
            part = OrderPart()
            part.order_id = self.current_order.id
            part.article = self.parts_table.item(row, 0).text()
            part.part_name = self.parts_table.item(row, 1).text()
            part.quantity = float(self.parts_table.item(row, 2).text())
            part.price = float(self.parts_table.item(row, 3).text())
            part.total = float(self.parts_table.item(row, 4).text())
            
            self.db_session.add(part)
            
    def load_order(self, order):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞"""
        self.current_order = order
        self.is_editing = True
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.order_number_edit.setText(order.order_number)
        self.date_received_edit.setDateTime(QDateTime.fromSecsSinceEpoch(int(order.date_received.timestamp())))
        
        if order.date_delivery:
            self.date_delivery_edit.setDateTime(QDateTime.fromSecsSinceEpoch(int(order.date_delivery.timestamp())))
            
        self.notes_edit.setPlainText(order.notes or '')
        
        # –°—Ç–∞—Ç—É—Å
        if order.status:
            index = self.status_combo.findText(order.status.value)
            if index >= 0:
                self.status_combo.setCurrentIndex(index)
                
        # –ü–ª–∞—Ç–µ–∂–∏
        self.prepayment_edit.setValue(order.prepayment or 0)
        self.additional_payment_edit.setValue(order.additional_payment or 0)
        
        # –ö–ª–∏–µ–Ω—Ç
        if order.client:
            self.client_search_edit.setText(order.client.name)
            self.selected_client = order.client
            
        # –ê–≤—Ç–æ–º–æ–±–∏–ª—å
        if order.car:
            self.car_search_edit.setText(order.car.vin or order.car.license_plate or '')
            self.selected_car = order.car
            self.fill_car_fields(order.car)
            
        # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
        if order.responsible_person_id:
            for i in range(self.responsible_combo.count()):
                if self.responsible_combo.itemData(i) == order.responsible_person_id:
                    self.responsible_combo.setCurrentIndex(i)
                    break
                    
        # –ú–µ–Ω–µ–¥–∂–µ—Ä
        if order.manager_id:
            for i in range(self.manager_combo.count()):
                if self.manager_combo.itemData(i) == order.manager_id:
                    self.manager_combo.setCurrentIndex(i)
                    break
                    
        # –£—Å–ª—É–≥–∏
        self.services_table.setRowCount(0)
        for service in order.services:
            self.add_service_to_table(service.service_name, service.price)
            
        # –ó–∞–ø—á–∞—Å—Ç–∏
        self.parts_table.setRowCount(0)
        for part in order.parts:
            self.add_part_to_table(part.article, part.part_name, part.quantity, part.price)
            
        self.calculate_totals()
        self.unsaved_changes = False
        
        self.title_label.setText(f'‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order.order_number}')
        
    def clear_form(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã"""
        if self.unsaved_changes:
            reply = QMessageBox.question(
                self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                '–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É?',
                QMessageBox.Yes | QMessageBox.No
            )
            
            if reply != QMessageBox.Yes:
                return
                
        # –°–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–ª–µ–π
        self.current_order = None
        self.is_editing = False
        self.unsaved_changes = False
        
        self.order_number_edit.clear()
        self.date_received_edit.setDateTime(QDateTime.currentDateTime())
        self.date_delivery_edit.setDateTime(QDateTime.currentDateTime().addDays(1))
        self.notes_edit.clear()
        
        self.client_search_edit.clear()
        self.car_search_edit.clear()
        
        self.car_brand_combo.setCurrentIndex(0)
        self.car_model_combo.clear()
        self.car_year_spin.setValue(datetime.now().year)
        self.car_vin_edit.clear()
        self.car_plate_edit.clear()
        
        self.responsible_combo.setCurrentIndex(0)
        self.manager_combo.setCurrentIndex(0)
        self.status_combo.setCurrentIndex(0)
        
        self.prepayment_edit.setValue(0)
        self.additional_payment_edit.setValue(0)
        
        self.services_table.setRowCount(0)
        self.parts_table.setRowCount(0)
        
        self.client_info_label.setText('–ö–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω')
        self.car_info_label.setText('–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω')
        
        self.calculate_totals()
        
        self.title_label.setText('üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑-–Ω–∞—Ä—è–¥')
        
        self.status_message.emit('–§–æ—Ä–º–∞ –æ—á–∏—â–µ–Ω–∞', 2000)
        
    def print_order(self):
        """–ü–µ—á–∞—Ç—å –∑–∞–∫–∞–∑–∞"""
        if not self.current_order:
            QMessageBox.information(self, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∑–∞–∫–∞–∑')
            return
            
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—á–∞—Ç—å
        self.status_message.emit('–§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞', 2000)
        
    def has_unsaved_changes(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        return self.unsaved_changes
        
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è"""
        if self.unsaved_changes:
            reply = QMessageBox.question(
                self, '–ù–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                '–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º?',
                QMessageBox.Save | QMessageBox.Discard | QMessageBox.Cancel
            )
            
            if reply == QMessageBox.Save:
                if not self.save_draft():
                    event.ignore()
                    return
            elif reply == QMessageBox.Cancel:
                event.ignore()
                return
                
        self.autosave_timer.stop()
        event.accept()
      
    def refresh_services_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ª—É–≥ –∏–∑ –ë–î"""
        if not self.current_order or not self.current_order.id:
            return
            
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ –∏–∑ –ë–î
            services = self.db_session.query(OrderService).filter(
                OrderService.order_id == self.current_order.id
            ).all()
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.services_table.setRowCount(0)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            for service in services:
                self.add_service_row_from_db(service)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —É—Å–ª—É–≥: {e}")

    def refresh_parts_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø—á–∞—Å—Ç–µ–π –∏–∑ –ë–î"""
        if not self.current_order or not self.current_order.id:
            return
            
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø—á–∞—Å—Ç–∏ –∏–∑ –ë–î
            parts = self.db_session.query(OrderPart).filter(
                OrderPart.order_id == self.current_order.id
            ).all()
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.parts_table.setRowCount(0)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            for part in parts:
                self.add_part_row_from_db(part)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø—á–∞—Å—Ç–µ–π: {e}")

    def add_service_row_from_db(self, service):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —É—Å–ª—É–≥–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ë–î"""
        row = self.services_table.rowCount()
        self.services_table.insertRow(row)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ OrderService
        self.services_table.setItem(row, 0, QTableWidgetItem(service.service_name or "–£—Å–ª—É–≥–∞"))
        
        price_item = QTableWidgetItem(f'{float(service.price):.2f}')
        price_item.setTextAlignment(Qt.AlignRight)
        self.services_table.setItem(row, 1, price_item)
        
        # –¶–µ–Ω–∞ —Å –ù–î–°
        vat_price = float(service.price_with_vat or service.price * 1.2)
        vat_item = QTableWidgetItem(f'{vat_price:.2f}')
        vat_item.setTextAlignment(Qt.AlignRight)
        self.services_table.setItem(row, 2, vat_item)
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = QPushButton('üóëÔ∏è')
        delete_btn.setMaximumWidth(30)
        delete_btn.clicked.connect(lambda: self.remove_service_from_db(service.id, row))
        self.services_table.setCellWidget(row, 3, delete_btn)

    def add_part_row_from_db(self, part):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—á–∞—Å—Ç–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ë–î"""
        row = self.parts_table.rowCount()
        self.parts_table.insertRow(row)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ OrderPart
        self.parts_table.setItem(row, 0, QTableWidgetItem(part.article or ""))
        self.parts_table.setItem(row, 1, QTableWidgetItem(part.part_name))
        
        qty_item = QTableWidgetItem(str(part.quantity))
        qty_item.setTextAlignment(Qt.AlignCenter)
        self.parts_table.setItem(row, 2, qty_item)
        
        price_item = QTableWidgetItem(f'{float(part.price):.2f}')
        price_item.setTextAlignment(Qt.AlignRight)
        self.parts_table.setItem(row, 3, price_item)
        
        total = float(part.price) * part.quantity
        total_item = QTableWidgetItem(f'{total:.2f}')
        total_item.setTextAlignment(Qt.AlignRight)
        self.parts_table.setItem(row, 4, total_item)
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = QPushButton('üóëÔ∏è')
        delete_btn.setMaximumWidth(30)
        delete_btn.clicked.connect(lambda: self.remove_part_from_db(part.id, row))
        self.parts_table.setCellWidget(row, 5, delete_btn)

    def remove_service_from_db(self, service_id, row):
        """–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏–∑ –ë–î"""
        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            '–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É?',
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            try:
                # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
                service = self.db_session.get(OrderService, service_id)
                if service:
                    self.db_session.delete(service)
                    self.db_session.commit()
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                self.services_table.removeRow(row)
                self.calculate_totals()
                self.mark_unsaved_changes()
                
            except Exception as e:
                self.db_session.rollback()
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: {e}")
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É: {e}')

    def remove_part_from_db(self, part_id, row):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏ –∏–∑ –ë–î"""
        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            '–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø—á–∞—Å—Ç—å?',
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            try:
                # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
                part = self.db_session.get(OrderPart, part_id)
                if part:
                    self.db_session.delete(part)
                    self.db_session.commit()
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                self.parts_table.removeRow(row)
                self.calculate_totals()
                self.mark_unsaved_changes()
                
            except Exception as e:
                self.db_session.rollback()
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç–∏: {e}")
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å: {e}')