"""
–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
"""

from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QGridLayout, 
                               QLabel, QLineEdit, QPushButton, QTextEdit, QComboBox, 
                               QFrame, QCheckBox, QCompleter, QProgressBar, QScrollArea,
                               QSplitter, QGroupBox, QSpacerItem, QSizePolicy, QDateEdit,
                               QDoubleSpinBox, QSpinBox, QTableWidget, QTableWidgetItem,
                               QHeaderView, QAbstractItemView, QTabWidget, QMessageBox,
                               QDateTimeEdit)
from PySide6.QtCore import Qt, QDate, Signal, QTimer, QDateTime
from PySide6.QtGui import QFont, QPalette, QColor, QPixmap, QPainter
import logging
from datetime import datetime
from decimal import Decimal

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π
from shared_models.common_models import Client, Car, Employee
from ..models_sto import Order, OrderService, OrderPart, ServiceCatalog, OrderStatus

# –ò–º–ø–æ—Ä—Ç—ã –¥–∏–∞–ª–æ–≥–æ–≤
from ..dialogs.client_dialog import ClientDialog
from ..dialogs.car_dialog import CarDialog
from ..dialogs.service_dialog import ServiceDialog
from ..dialogs.part_dialog import PartDialog


class NewOrderView(QWidget):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    
    order_created = Signal(dict)
    status_message = Signal(str, int)
    order_saved = Signal()
    
    def __init__(self, db_session, parent=None):
        super().__init__(parent)
        self.db_session = db_session
        self.logger = logging.getLogger(__name__)
        
        # –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        self.current_order = None
        self.selected_client = None
        self.selected_car = None
        self.unsaved_changes = False
        
        self.setup_ui()
        self.setup_connections()
        self.load_data()
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self.autosave_timer = QTimer()
        self.autosave_timer.timeout.connect(self.save_draft)
        self.autosave_timer.start(300000)  # 5 –º–∏–Ω—É—Ç
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(10, 10, 10, 10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞")
        title_font = QFont()
        title_font.setPointSize(16)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setStyleSheet("color: #2c3e50; margin-bottom: 20px;")
        main_layout.addWidget(title_label)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –ø–∞–Ω–µ–ª–∏
        self.main_splitter = QSplitter(Qt.Vertical)
        self.main_splitter.setChildrenCollapsible(False)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –∏ –∫–ª–∏–µ–Ω—Ç–µ
        self.create_order_info_panel()
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å - —É—Å–ª—É–≥–∏ –∏ –∑–∞–ø—á–∞—Å—Ç–∏
        self.create_services_parts_panel()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏ –≤ —Å–ø–ª–∏—Ç—Ç–µ—Ä
        self.main_splitter.addWidget(self.order_info_widget)
        self.main_splitter.addWidget(self.services_parts_widget)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ (40% –≤–µ—Ä—Ö, 60% –Ω–∏–∑)
        self.main_splitter.setSizes([400, 600])
        
        # –°—Ç–∏–ª–∏–∑—É–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä
        self.main_splitter.setStyleSheet("""
            QSplitter::handle {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #3498db, stop:1 #2980b9);
                border: 1px solid #2980b9;
                height: 8px;
                border-radius: 4px;
            }
            QSplitter::handle:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #5dade2, stop:1 #3498db);
            }
        """)
        
        main_layout.addWidget(self.main_splitter)
        
        # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_control_buttons()
        main_layout.addWidget(self.control_buttons_widget)
    
    def create_order_info_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ"""
        self.order_info_widget = QWidget()
        layout = QHBoxLayout(self.order_info_widget)
        
        # –õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ - –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞
        order_group = QGroupBox("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ")
        order_layout = QGridLayout(order_group)
        
        # –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        order_layout.addWidget(QLabel("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:"), 0, 0)
        self.order_number_edit = QLineEdit()
        self.order_number_edit.setPlaceholderText("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...")
        self.order_number_edit.setReadOnly(True)
        order_layout.addWidget(self.order_number_edit, 0, 1)
        
        # –î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞
        order_layout.addWidget(QLabel("–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞:"), 1, 0)
        self.date_received_edit = QDateTimeEdit()
        self.date_received_edit.setDateTime(QDateTime.currentDateTime())
        self.date_received_edit.setCalendarPopup(True)
        order_layout.addWidget(self.date_received_edit, 1, 1)
        
        # –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏
        order_layout.addWidget(QLabel("–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:"), 2, 0)
        self.date_delivery_edit = QDateTimeEdit()
        self.date_delivery_edit.setDateTime(QDateTime.currentDateTime().addDays(1))
        self.date_delivery_edit.setCalendarPopup(True)
        order_layout.addWidget(self.date_delivery_edit, 2, 1)
        
        # –°—Ç–∞—Ç—É—Å
        order_layout.addWidget(QLabel("–°—Ç–∞—Ç—É—Å:"), 3, 0)
        self.status_combo = QComboBox()
        for status in OrderStatus:
            self.status_combo.addItem(status.value, status)
        order_layout.addWidget(self.status_combo, 3, 1)
        
        layout.addWidget(order_group)
        
        # –ü—Ä–∞–≤–∞—è –≥—Ä—É–ø–ø–∞ - –∫–ª–∏–µ–Ω—Ç –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
        client_car_group = QGroupBox("üë§ –ö–ª–∏–µ–Ω—Ç –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å")
        client_car_layout = QVBoxLayout(client_car_group)
        
        # –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
        client_search_layout = QHBoxLayout()
        client_search_layout.addWidget(QLabel("–ö–ª–∏–µ–Ω—Ç:"))
        self.client_search_edit = QLineEdit()
        self.client_search_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω...")
        client_search_layout.addWidget(self.client_search_edit)
        
        self.new_client_btn = QPushButton("+ –ù–æ–≤—ã–π")
        self.new_client_btn.setStyleSheet("background-color: #27ae60; color: white;")
        client_search_layout.addWidget(self.new_client_btn)
        
        client_car_layout.addLayout(client_search_layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
        self.client_info_label = QLabel("–ö–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.client_info_label.setStyleSheet("color: #666; font-style: italic; margin: 5px;")
        client_car_layout.addWidget(self.client_info_label)
        
        # –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        car_search_layout = QHBoxLayout()
        car_search_layout.addWidget(QLabel("–ê–≤—Ç–æ–º–æ–±–∏–ª—å:"))
        self.car_combo = QComboBox()
        self.car_combo.setEnabled(False)
        car_search_layout.addWidget(self.car_combo)
        
        self.new_car_btn = QPushButton("+ –ù–æ–≤—ã–π")
        self.new_car_btn.setStyleSheet("background-color: #3498db; color: white;")
        self.new_car_btn.setEnabled(False)
        car_search_layout.addWidget(self.new_car_btn)
        
        client_car_layout.addLayout(car_search_layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        self.car_info_label = QLabel("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        self.car_info_label.setStyleSheet("color: #666; font-style: italic; margin: 5px;")
        client_car_layout.addWidget(self.car_info_label)
        
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
        client_car_layout.addWidget(QLabel("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:"))
        self.notes_edit = QTextEdit()
        self.notes_edit.setMaximumHeight(80)
        self.notes_edit.setPlaceholderText("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...")
        client_car_layout.addWidget(self.notes_edit)
        
        layout.addWidget(client_car_group)
    
    def create_services_parts_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É—Å–ª—É–≥ –∏ –∑–∞–ø—á–∞—Å—Ç–µ–π"""
        self.services_parts_widget = QWidget()
        layout = QHBoxLayout(self.services_parts_widget)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã –¥–ª—è —É—Å–ª—É–≥ –∏ –∑–∞–ø—á–∞—Å—Ç–µ–π
        tabs = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ —É—Å–ª—É–≥
        self.create_services_tab(tabs)
        
        # –í–∫–ª–∞–¥–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π
        self.create_parts_tab(tabs)
        
        layout.addWidget(tabs)
        
        # –ü–∞–Ω–µ–ª—å –∏—Ç–æ–≥–æ–≤
        self.create_totals_panel()
        layout.addWidget(self.totals_widget)
        
        # –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏: 70% —Ç–∞–±—ã, 30% –∏—Ç–æ–≥–∏
        layout.setStretchFactor(tabs, 7)
        layout.setStretchFactor(self.totals_widget, 3)
    
    def create_services_tab(self, tabs):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É—Å–ª—É–≥"""
        services_widget = QWidget()
        services_layout = QVBoxLayout(services_widget)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏
        services_control_layout = QHBoxLayout()
        
        self.add_service_btn = QPushButton("+ –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É")
        self.add_service_btn.setStyleSheet("background-color: #27ae60; color: white;")
        services_control_layout.addWidget(self.add_service_btn)
        
        self.remove_service_btn = QPushButton("- –£–¥–∞–ª–∏—Ç—å")
        self.remove_service_btn.setStyleSheet("background-color: #e74c3c; color: white;")
        services_control_layout.addWidget(self.remove_service_btn)
        
        services_control_layout.addStretch()
        services_layout.addLayout(services_control_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ —É—Å–ª—É–≥
        self.services_table = QTableWidget()
        self.services_table.setColumnCount(4)
        self.services_table.setHorizontalHeaderLabels([
            "–£—Å–ª—É–≥–∞", "–¶–µ–Ω–∞", "–ú–∞—Å—Ç–µ—Ä", "–°—Ç–∞—Ç—É—Å"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.services_table.horizontalHeader()
        header.setStretchLastSection(True)
        self.services_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.services_table.setAlternatingRowColors(True)
        
        services_layout.addWidget(self.services_table)
        
        tabs.addTab(services_widget, "üîß –£—Å–ª—É–≥–∏")
    
    def create_parts_tab(self, tabs):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∑–∞–ø—á–∞—Å—Ç–µ–π"""
        parts_widget = QWidget()
        parts_layout = QVBoxLayout(parts_widget)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç—è–º–∏
        parts_control_layout = QHBoxLayout()
        
        self.add_part_btn = QPushButton("+ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å")
        self.add_part_btn.setStyleSheet("background-color: #27ae60; color: white;")
        parts_control_layout.addWidget(self.add_part_btn)
        
        self.remove_part_btn = QPushButton("- –£–¥–∞–ª–∏—Ç—å")
        self.remove_part_btn.setStyleSheet("background-color: #e74c3c; color: white;")
        parts_control_layout.addWidget(self.remove_part_btn)
        
        parts_control_layout.addStretch()
        parts_layout.addLayout(parts_control_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π
        self.parts_table = QTableWidget()
        self.parts_table.setColumnCount(5)
        self.parts_table.setHorizontalHeaderLabels([
            "–ó–∞–ø—á–∞—Å—Ç—å", "–ê—Ä—Ç–∏–∫—É–ª", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞ –∑–∞ –µ–¥.", "–ò—Ç–æ–≥–æ"
        ])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        header = self.parts_table.horizontalHeader()
        header.setStretchLastSection(True)
        self.parts_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.parts_table.setAlternatingRowColors(True)
        
        parts_layout.addWidget(self.parts_table)
        
        tabs.addTab(parts_widget, "üî© –ó–∞–ø—á–∞—Å—Ç–∏")
    
    def create_totals_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏—Ç–æ–≥–æ–≤"""
        self.totals_widget = QWidget()
        totals_layout = QVBoxLayout(self.totals_widget)
        
        # –ì—Ä—É–ø–ø–∞ –∏—Ç–æ–≥–æ–≤
        totals_group = QGroupBox("üí∞ –ò—Ç–æ–≥–∏ –∑–∞–∫–∞–∑–∞")
        group_layout = QGridLayout(totals_group)
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥
        group_layout.addWidget(QLabel("–£—Å–ª—É–≥–∏:"), 0, 0)
        self.services_total_label = QLabel("0.00 ‚ÇΩ")
        self.services_total_label.setStyleSheet("font-weight: bold; color: #27ae60;")
        group_layout.addWidget(self.services_total_label, 0, 1)
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—á–∞—Å—Ç–µ–π
        group_layout.addWidget(QLabel("–ó–∞–ø—á–∞—Å—Ç–∏:"), 1, 0)
        self.parts_total_label = QLabel("0.00 ‚ÇΩ")
        self.parts_total_label.setStyleSheet("font-weight: bold; color: #3498db;")
        group_layout.addWidget(self.parts_total_label, 1, 1)
        
        # –°–∫–∏–¥–∫–∞
        group_layout.addWidget(QLabel("–°–∫–∏–¥–∫–∞:"), 2, 0)
        self.discount_input = QDoubleSpinBox()
        self.discount_input.setRange(0, 100)
        self.discount_input.setSuffix(" %")
        group_layout.addWidget(self.discount_input, 2, 1)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        line = QFrame()
        line.setFrameShape(QFrame.HLine)
        line.setFrameShadow(QFrame.Sunken)
        group_layout.addWidget(line, 3, 0, 1, 2)
        
        # –û–±—â–∞—è —Å—É–º–º–∞
        group_layout.addWidget(QLabel("–ò–¢–û–ì–û:"), 4, 0)
        self.total_label = QLabel("0.00 ‚ÇΩ")
        self.total_label.setStyleSheet("font-weight: bold; font-size: 16px; color: #e74c3c;")
        group_layout.addWidget(self.total_label, 4, 1)
        
        totals_layout.addWidget(totals_group)
        totals_layout.addStretch()
    
    def create_control_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫"""
        self.control_buttons_widget = QWidget()
        layout = QHBoxLayout(self.control_buttons_widget)
        layout.setContentsMargins(0, 10, 0, 0)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        self.clear_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É")
        self.clear_btn.setStyleSheet("""
            QPushButton {
                background-color: #f39c12;
                color: white;
                font-weight: bold;
                padding: 12px 25px;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #e67e22;
            }
        """)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        self.save_draft_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫")
        self.save_draft_btn.setStyleSheet("""
            QPushButton {
                background-color: #95a5a6;
                color: white;
                font-weight: bold;
                padding: 12px 25px;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #7f8c8d;
            }
        """)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑")
        self.save_btn.setStyleSheet("""
            QPushButton {
                background-color: #27ae60;
                color: white;
                font-weight: bold;
                padding: 12px 25px;
                border-radius: 6px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #2ecc71;
            }
            QPushButton:disabled {
                background-color: #95a5a6;
            }
        """)
        self.save_btn.setEnabled(False)
        
        layout.addStretch()
        layout.addWidget(self.clear_btn)
        layout.addWidget(self.save_draft_btn)
        layout.addWidget(self.save_btn)
    
    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
        self.client_search_edit.textChanged.connect(self.search_clients)
        self.new_client_btn.clicked.connect(self.create_new_client)
        
        # –ê–≤—Ç–æ–º–æ–±–∏–ª—å
        self.car_combo.currentIndexChanged.connect(self.on_car_selected)
        self.new_car_btn.clicked.connect(self.create_new_car)
        
        # –£—Å–ª—É–≥–∏ –∏ –∑–∞–ø—á–∞—Å—Ç–∏
        self.add_service_btn.clicked.connect(self.add_service)
        self.remove_service_btn.clicked.connect(self.remove_service)
        self.add_part_btn.clicked.connect(self.add_part)
        self.remove_part_btn.clicked.connect(self.remove_part)
        
        # –†–∞—Å—á–µ—Ç—ã
        self.discount_input.valueChanged.connect(self.calculate_totals)
        
        # –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
        self.save_btn.clicked.connect(self.save_order)
        self.save_draft_btn.clicked.connect(self.save_draft)
        self.clear_btn.clicked.connect(self.clear_form)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.notes_edit.textChanged.connect(self.mark_unsaved_changes)
        self.date_received_edit.dateTimeChanged.connect(self.mark_unsaved_changes)
        self.date_delivery_edit.dateTimeChanged.connect(self.mark_unsaved_changes)
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
            clients = self.db_session.query(Client).all()
            client_names = [f"{c.name} - {c.phone}" for c in clients]
            completer = QCompleter(client_names)
            completer.setCaseSensitivity(Qt.CaseInsensitive)
            self.client_search_edit.setCompleter(completer)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def search_clients(self, text):
        """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        if len(text) < 2:
            self.client_info_label.setText("–ö–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
            self.selected_client = None
            self.car_combo.clear()
            self.car_combo.setEnabled(False)
            self.new_car_btn.setEnabled(False)
            return
        
        try:
            clients = self.db_session.query(Client).filter(
                (Client.name.ilike(f"%{text}%")) |
                (Client.phone.ilike(f"%{text}%"))
            ).limit(10).all()
            
            if clients:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                self.select_client(clients[0])
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
    
    def select_client(self, client):
        """–í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞"""
        self.selected_client = client
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        info_text = f"üìû {client.phone}"
        if client.address:
            info_text += f"\nüìç {client.address}"
        self.client_info_label.setText(info_text)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞
        self.load_client_cars()
        
        # –í–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        self.new_car_btn.setEnabled(True)
        
        self.check_form_validity()
    
    def load_client_cars(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.selected_client:
            return
        
        try:
            cars = self.db_session.query(Car).filter_by(client_id=self.selected_client.id).all()
            
            self.car_combo.clear()
            self.car_combo.addItem("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å", None)
            
            for car in cars:
                display_text = f"{car.make or '–ù–µ–∏–∑–≤.'} {car.model or ''} ({car.year or '–Ω/–¥'}) - {car.license_plate or '–±–µ–∑ –Ω–æ–º–µ—Ä–∞'}"
                self.car_combo.addItem(display_text, car)
            
            self.car_combo.setEnabled(True)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {e}")
    
    def on_car_selected(self, index):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        if index <= 0:
            self.selected_car = None
            self.car_info_label.setText("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
            self.check_form_validity()
            return
        
        car = self.car_combo.itemData(index)
        if car:
            self.select_car(car)
    
    def select_car(self, car):
        """–í—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        self.selected_car = car
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
        info_text = f"üöó {car.make or '–ù–µ–∏–∑–≤.'} {car.model or ''} ({car.year or '–Ω/–¥'})"
        if car.vin:
            info_text += f"\nüìã VIN: {car.vin}"
        self.car_info_label.setText(info_text)
        
        self.check_form_validity()
    
    def create_new_client(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        dialog = ClientDialog(parent=self)
        dialog.db_session = self.db_session
        if dialog.exec():
            client = dialog.get_client()
            if client:
                self.client_search_edit.setText(client.name)
                self.select_client(client)
                self.load_data()  # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    
    def create_new_car(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        if not self.selected_client:
            return
        
        dialog = CarDialog(parent=self, client_id=self.selected_client.id)
        dialog.db_session = self.db_session
        if dialog.exec():
            car = dialog.get_car()
            if car:
                self.load_client_cars()
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
                for i in range(self.car_combo.count()):
                    if self.car_combo.itemData(i) and self.car_combo.itemData(i).id == car.id:
                        self.car_combo.setCurrentIndex(i)
                        break
    
    def add_service(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏"""
        if not self.current_order:
            if not self.save_draft():
                return
        
        try:
            dialog = ServiceDialog(parent=self, order_id=self.current_order.id)
            dialog.db_session = self.db_session
            if dialog.exec():
                self.refresh_services_table()
                self.calculate_totals()
                self.mark_unsaved_changes()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É: {e}")
    
    def remove_service(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏"""
        current_row = self.services_table.currentRow()
        if current_row >= 0:
            result = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É?",
                QMessageBox.Yes | QMessageBox.No
            )
            if result == QMessageBox.Yes:
                self.services_table.removeRow(current_row)
                self.calculate_totals()
                self.mark_unsaved_changes()
    
    def add_part(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏"""
        if not self.current_order:
            if not self.save_draft():
                return
        
        try:
            dialog = PartDialog(parent=self, order_id=self.current_order.id)
            dialog.db_session = self.db_session
            if dialog.exec():
                self.refresh_parts_table()
                self.calculate_totals()
                self.mark_unsaved_changes()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç–∏: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—á–∞—Å—Ç—å: {e}")
    
    def remove_part(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏"""
        current_row = self.parts_table.currentRow()
        if current_row >= 0:
            result = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø—á–∞—Å—Ç—å?",
                QMessageBox.Yes | QMessageBox.No
            )
            if result == QMessageBox.Yes:
                self.parts_table.removeRow(current_row)
                self.calculate_totals()
                self.mark_unsaved_changes()
    
    def refresh_services_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å–ª—É–≥"""
        if not self.current_order:
            return
        
        try:
            services = self.db_session.query(OrderService).filter_by(order_id=self.current_order.id).all()
            
            self.services_table.setRowCount(len(services))
            
            for row, service in enumerate(services):
                self.services_table.setItem(row, 0, QTableWidgetItem(service.service_name or ''))
                self.services_table.setItem(row, 1, QTableWidgetItem(f"{service.price:.2f} ‚ÇΩ"))
                self.services_table.setItem(row, 2, QTableWidgetItem(""))  # –ú–∞—Å—Ç–µ—Ä
                self.services_table.setItem(row, 3, QTableWidgetItem("–û–∂–∏–¥–∞–µ—Ç"))  # –°—Ç–∞—Ç—É—Å
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —É—Å–ª—É–≥: {e}")
    
    def refresh_parts_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø—á–∞—Å—Ç–µ–π"""
        if not self.current_order:
            return
        
        try:
            parts = self.db_session.query(OrderPart).filter_by(order_id=self.current_order.id).all()
            
            self.parts_table.setRowCount(len(parts))
            
            for row, part in enumerate(parts):
                self.parts_table.setItem(row, 0, QTableWidgetItem(part.part_name or ''))
                self.parts_table.setItem(row, 1, QTableWidgetItem(part.article or ''))
                self.parts_table.setItem(row, 2, QTableWidgetItem(str(part.quantity)))
                self.parts_table.setItem(row, 3, QTableWidgetItem(f"{part.price:.2f} ‚ÇΩ"))
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∑–∞–ø—á–∞—Å—Ç–µ–π: {e}")
    
    def calculate_totals(self):
        """–†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤"""
        # –°—É–º–º–∞ —É—Å–ª—É–≥
        services_total = 0.0
        if self.current_order:
            try:
                services = self.db_session.query(OrderService).filter_by(order_id=self.current_order.id).all()
                services_total = sum(service.price for service in services)
            except:
                pass
        
        self.services_total_label.setText(f"{services_total:.2f} ‚ÇΩ")
        
        # –°—É–º–º–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π
        parts_total = 0.0
        if self.current_order:
            try:
                parts = self.db_session.query(OrderPart).filter_by(order_id=self.current_order.id).all()
                parts_total = sum(part.quantity * part.price for part in parts)
            except:
                pass
        
        self.parts_total_label.setText(f"{parts_total:.2f} ‚ÇΩ")
        
        # –û–±—â–∞—è —Å—É–º–º–∞ –¥–æ —Å–∫–∏–¥–∫–∏
        subtotal = services_total + parts_total
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É
        discount_percent = self.discount_input.value()
        discount_amount = subtotal * (discount_percent / 100)
        total = subtotal - discount_amount
        
        self.total_label.setText(f"{total:.2f} ‚ÇΩ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã
        self.check_form_validity()
    
    def check_form_validity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã"""
        is_valid = (
            self.selected_client is not None and
            self.selected_car is not None
        )
        
        self.save_btn.setEnabled(is_valid)
    
    def mark_unsaved_changes(self):
        """–û—Ç–º–µ—Ç–∫–∞ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        self.unsaved_changes = True
    
    def generate_order_number(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
        try:
            today = datetime.now()
            date_str = today.strftime('%Y%m%d')
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–æ–º–µ—Ä –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            pattern = f'–°–¢–û-{date_str}-%'
            last_order = self.db_session.query(Order).filter(
                Order.order_number.like(pattern)
            ).order_by(Order.order_number.desc()).first()
            
            if last_order:
                last_num = int(last_order.order_number.split('-')[-1])
                new_num = last_num + 1
            else:
                new_num = 1
                
            return f'–°–¢–û-{date_str}-{new_num:03d}'
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞: {e}")
            return f'–°–¢–û-{datetime.now().strftime("%Y%m%d")}-001'
    
    def save_draft(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞"""
        try:
            if not self.selected_client:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not self.current_order:
                self.current_order = Order()
                self.current_order.order_number = self.generate_order_number()
                self.order_number_edit.setText(self.current_order.order_number)
                self.db_session.add(self.current_order)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.current_order.client_id = self.selected_client.id
            if self.selected_car:
                self.current_order.car_id = self.selected_car.id
            
            self.current_order.date_received = self.date_received_edit.dateTime().toPython()
            self.current_order.date_delivery = self.date_delivery_edit.dateTime().toPython()
            self.current_order.notes = self.notes_edit.toPlainText()
            self.current_order.status = OrderStatus.DRAFT
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
            services_total = 0.0
            parts_total = 0.0
            
            if self.current_order.id:
                services = self.db_session.query(OrderService).filter_by(order_id=self.current_order.id).all()
                services_total = sum(service.price for service in services)
                
                parts = self.db_session.query(OrderPart).filter_by(order_id=self.current_order.id).all()
                parts_total = sum(part.quantity * part.price for part in parts)
            
            self.current_order.total_amount = services_total + parts_total
            
            self.db_session.commit()
            
            self.unsaved_changes = False
            self.status_message.emit("–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", 2000)
            
            return True
            
        except Exception as e:
            self.db_session.rollback()
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫: {e}")
            return False
    
    def save_order(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        if not self.selected_client or not self.selected_car:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å")
            return
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
            if not self.save_draft():
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status_index = self.status_combo.currentIndex()
            if status_index >= 0:
                status_data = self.status_combo.itemData(status_index)
                if status_data:
                    self.current_order.status = status_data
                else:
                    self.current_order.status = OrderStatus.IN_WORK
            
            self.db_session.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            order_data = {
                'id': self.current_order.id,
                'number': self.current_order.order_number,
                'client': self.selected_client.name,
                'car': f"{self.selected_car.make} {self.selected_car.model}",
                'total': self.current_order.total_amount
            }
            self.order_created.emit(order_data)
            self.order_saved.emit()
            
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ó–∞–∫–∞–∑ {self.current_order.order_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
            
            # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
            self.clear_form()
            
        except Exception as e:
            self.db_session.rollback()
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑: {e}")
    
    def clear_form(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã"""
        if self.unsaved_changes:
            result = QMessageBox.question(
                self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", 
                "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Ñ–æ—Ä–º—É? –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.",
                QMessageBox.Yes | QMessageBox.No
            )
            
            if result != QMessageBox.Yes:
                return
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.current_order = None
        self.selected_client = None
        self.selected_car = None
        self.unsaved_changes = False
        
        # –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.order_number_edit.clear()
        self.client_search_edit.clear()
        self.client_info_label.setText("–ö–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω")
        
        self.car_combo.clear()
        self.car_combo.setEnabled(False)
        self.new_car_btn.setEnabled(False)
        self.car_info_label.setText("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        
        self.date_received_edit.setDateTime(QDateTime.currentDateTime())
        self.date_delivery_edit.setDateTime(QDateTime.currentDateTime().addDays(1))
        self.status_combo.setCurrentIndex(0)
        
        self.services_table.setRowCount(0)
        self.parts_table.setRowCount(0)
        
        self.discount_input.setValue(0)
        self.notes_edit.clear()
        
        self.calculate_totals()
        self.check_form_validity()
    
    def has_unsaved_changes(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        return self.unsaved_changes
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∏–¥–∂–µ—Ç–∞"""
        if self.unsaved_changes:
            result = QMessageBox.question(
                self, "–ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                "–ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º?",
                QMessageBox.Save | QMessageBox.Discard | QMessageBox.Cancel
            )
            
            if result == QMessageBox.Save:
                if not self.save_draft():
                    event.ignore()
                    return
            elif result == QMessageBox.Cancel:
                event.ignore()
                return
        
        self.autosave_timer.stop()
        event.accept()