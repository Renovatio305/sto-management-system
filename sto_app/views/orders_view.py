# sto_app/views/orders_view.py
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QTableView, 
                              QToolBar, QLineEdit, QComboBox, QPushButton, QLabel,
                              QHeaderView, QMenu, QMessageBox, QSplitter, QFrame,
                              QGroupBox, QDateEdit, QCheckBox)
from PySide6.QtCore import Qt, Signal, QAbstractTableModel, QModelIndex, QSortFilterProxyModel, QDate
from PySide6.QtGui import QAction, QIcon, QFont, QColor, QPalette
from sto_app.dialogs.order_details_dialog import OrderDetailsDialog
from sqlalchemy.orm import Session, joinedload
from sqlalchemy import and_, or_, desc
from datetime import datetime, timedelta
import logging

from shared_models.common_models import Client, Car
from sto_app.models_sto import Order, OrderStatus
from sto_app.dialogs.order_details_dialog import OrderDetailsDialog


logger = logging.getLogger(__name__)


class OrdersTableModel(QAbstractTableModel):
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤"""
    
    def __init__(self, db_session: Session):
        super().__init__()
        self.db_session = db_session
        self.orders = []
        self.headers = [
            '‚Ññ –∑–∞–∫–∞–∑–∞', '–î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞', '–ö–ª–∏–µ–Ω—Ç', '–ê–≤—Ç–æ–º–æ–±–∏–ª—å', 
            'VIN', '–°—Ç–∞—Ç—É—Å', '–°—É–º–º–∞', '–û—Å—Ç–∞—Ç–æ–∫', '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π'
        ]
        
    def rowCount(self, parent=QModelIndex()):
        return len(self.orders)
        
    def columnCount(self, parent=QModelIndex()):
        return len(self.headers)
        
    def headerData(self, section, orientation, role=Qt.DisplayRole):
        if orientation == Qt.Horizontal and role == Qt.DisplayRole:
            return self.headers[section]
        return None
        
    def data(self, index, role=Qt.DisplayRole):
        if not index.isValid() or index.row() >= len(self.orders):
            return None
            
        order = self.orders[index.row()]
        col = index.column()
        
        if role == Qt.DisplayRole:
            if col == 0:  # ‚Ññ –∑–∞–∫–∞–∑–∞
                return order.order_number
            elif col == 1:  # –î–∞—Ç–∞ –ø—Ä–∏—ë–º–∞
                return order.date_received.strftime('%d.%m.%Y') if order.date_received else ''
            elif col == 2:  # –ö–ª–∏–µ–Ω—Ç
                return order.client.name if order.client else ''
            elif col == 3:  # –ê–≤—Ç–æ–º–æ–±–∏–ª—å
                return order.car.full_name if order.car else ''
            elif col == 4:  # VIN
                return order.car.vin if order.car else ''
            elif col == 5:  # –°—Ç–∞—Ç—É—Å
                return order.status.value if order.status else ''
            elif col == 6:  # –°—É–º–º–∞
                return f"{order.total_amount:.2f} ‚Ç¥" if order.total_amount else '0.00 ‚Ç¥'
            elif col == 7:  # –û—Å—Ç–∞—Ç–æ–∫
                return f"{order.balance_due:.2f} ‚Ç¥" if order.balance_due else '0.00 ‚Ç¥'
            elif col == 8:  # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
                return order.responsible_person.name if order.responsible_person else ''

        elif role == Qt.UserRole:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ views
            return order.id      
                
        elif role == Qt.BackgroundRole:
            # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
            if col == 5:  # –ö–æ–ª–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
                if order.status == OrderStatus.DRAFT:
                    return QColor(255, 248, 220)  # –°–≤–µ—Ç–ª–æ-–∂—ë–ª—Ç—ã–π
                elif order.status == OrderStatus.IN_WORK:
                    return QColor(173, 216, 230)  # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
                elif order.status == OrderStatus.WAITING_PAYMENT:
                    return QColor(255, 218, 185)  # –°–≤–µ—Ç–ª–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
                elif order.status == OrderStatus.COMPLETED:
                    return QColor(144, 238, 144)  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª—ë–Ω—ã–π
                elif order.status == OrderStatus.CANCELLED:
                    return QColor(255, 182, 193)  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
                    
        elif role == Qt.TextAlignmentRole:
            if col in [6, 7]:  # –°—É–º–º—ã
                return Qt.AlignRight | Qt.AlignVCenter
            return Qt.AlignLeft | Qt.AlignVCenter
            
        elif role == Qt.FontRole:
            if col == 0:  # ‚Ññ –∑–∞–∫–∞–∑–∞ –∂–∏—Ä–Ω—ã–º
                font = QFont()
                font.setBold(True)
                return font
                
        return None
        
    def get_order(self, index):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if 0 <= index < len(self.orders):
            return self.orders[index]
        return None
        
    def refresh_data(self, filters=None):
        """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        self.beginResetModel()
        
        try:
            query = self.db_session.query(Order).options(
                joinedload(Order.client),
                joinedload(Order.car),
                joinedload(Order.responsible_person)
            )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if filters:
                if filters.get('status') and filters['status'] != '–í—Å–µ':
                    query = query.filter(Order.status == OrderStatus(filters['status']))
                    
                if filters.get('client_search'):
                    search_term = f"%{filters['client_search']}%"
                    query = query.join(Client).filter(Client.name.ilike(search_term))
                    
                if filters.get('vin_search'):
                    search_term = f"%{filters['vin_search']}%"
                    query = query.join(Car).filter(Car.vin.ilike(search_term))
                    
                if filters.get('date_from'):
                    query = query.filter(Order.date_received >= filters['date_from'])
                    
                if filters.get('date_to'):
                    query = query.filter(Order.date_received <= filters['date_to'])
                    
                if filters.get('only_unpaid'):
                    query = query.filter(Order.total_amount > Order.prepayment + Order.additional_payment)
            
            self.orders = query.order_by(desc(Order.date_received)).all()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
            self.orders = []
            
        self.endResetModel()


class OrdersView(QWidget):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
    
    status_message = Signal(str, int)
    order_selected = Signal(int)
    
    def __init__(self, db_session: Session):
        super().__init__()
        self.db_session = db_session
        self.setup_ui()
        self.load_orders()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(10, 10, 10, 10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel('üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏')
        title_font = QFont()
        title_font.setPointSize(16)
        title_font.setBold(True)
        title_label.setFont(title_font)
        layout.addWidget(title_label)
        
        # –°–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Ç–∞–±–ª–∏—Ü—ã
        splitter = QSplitter(Qt.Vertical)
        
        # –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters_frame = self.create_filters_panel()
        splitter.addWidget(filters_frame)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        table_frame = self.create_table_panel()
        splitter.addWidget(table_frame)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏: —Ñ–∏–ª—å—Ç—Ä—ã - 25%, —Ç–∞–±–ª–∏—Ü–∞ - 75%
        splitter.setSizes([200, 600])
        
        layout.addWidget(splitter)
        
        # –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π
        actions_layout = self.create_actions_panel()
        layout.addLayout(actions_layout)
        
    def create_filters_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        filters_frame = QFrame()
        filters_frame.setFrameStyle(QFrame.StyledPanel)
        filters_layout = QVBoxLayout(filters_frame)
        
        # –ì—Ä—É–ø–ø–∞ –±—ã—Å—Ç—Ä—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        quick_filters_group = QGroupBox('üîç –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã')
        quick_layout = QHBoxLayout(quick_filters_group)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        quick_layout.addWidget(QLabel('–°—Ç–∞—Ç—É—Å:'))
        self.status_filter = QComboBox()
        self.status_filter.addItems(['–í—Å–µ', '–ß–µ—Ä–Ω–µ—Ç–∫–∞', '–í —Ä–æ–±–æ—Ç—ñ', '–û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç—É', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', '–°–∫–∞—Å–æ–≤–∞–Ω–æ'])
        self.status_filter.currentTextChanged.connect(self.apply_filters)
        quick_layout.addWidget(self.status_filter)
        
        # –¢–æ–ª—å–∫–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ
        self.unpaid_only_cb = QCheckBox('–¢–æ–ª—å–∫–æ —Å –¥–æ–ª–≥–æ–º')
        self.unpaid_only_cb.toggled.connect(self.apply_filters)
        quick_layout.addWidget(self.unpaid_only_cb)
        
        quick_layout.addStretch()
        filters_layout.addWidget(quick_filters_group)
        
        # –ì—Ä—É–ø–ø–∞ –ø–æ–∏—Å–∫–∞
        search_group = QGroupBox('üîé –ü–æ–∏—Å–∫')
        search_layout = QVBoxLayout(search_group)
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª–∏–µ–Ω—Ç—É
        client_layout = QHBoxLayout()
        client_layout.addWidget(QLabel('–ö–ª–∏–µ–Ω—Ç:'))
        self.client_search = QLineEdit()
        self.client_search.setPlaceholderText('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞...')
        self.client_search.textChanged.connect(self.apply_filters)
        client_layout.addWidget(self.client_search)
        search_layout.addLayout(client_layout)
        
        # –ü–æ–∏—Å–∫ –ø–æ VIN
        vin_layout = QHBoxLayout()
        vin_layout.addWidget(QLabel('VIN/–ù–æ–º–µ—Ä:'))
        self.vin_search = QLineEdit()
        self.vin_search.setPlaceholderText('–í–≤–µ–¥–∏—Ç–µ VIN –∏–ª–∏ –≥–æ—Å. –Ω–æ–º–µ—Ä...')
        self.vin_search.textChanged.connect(self.apply_filters)
        vin_layout.addWidget(self.vin_search)
        search_layout.addLayout(vin_layout)
        
        filters_layout.addWidget(search_group)
        
        # –ì—Ä—É–ø–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–∞–º
        dates_group = QGroupBox('üìÖ –ü–µ—Ä–∏–æ–¥')
        dates_layout = QHBoxLayout(dates_group)
        
        dates_layout.addWidget(QLabel('–°:'))
        self.date_from = QDateEdit()
        self.date_from.setDate(QDate.currentDate().addDays(-30))
        self.date_from.setCalendarPopup(True)
        self.date_from.dateChanged.connect(self.apply_filters)
        dates_layout.addWidget(self.date_from)
        
        dates_layout.addWidget(QLabel('–ü–æ:'))
        self.date_to = QDateEdit()
        self.date_to.setDate(QDate.currentDate())
        self.date_to.setCalendarPopup(True)
        self.date_to.dateChanged.connect(self.apply_filters)
        dates_layout.addWidget(self.date_to)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        reset_btn = QPushButton('üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å')
        reset_btn.clicked.connect(self.reset_filters)
        dates_layout.addWidget(reset_btn)
        
        filters_layout.addWidget(dates_group)
        filters_layout.addStretch()
        
        return filters_frame
        
    def create_table_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å —Ç–∞–±–ª–∏—Ü–µ–π"""
        table_frame = QFrame()
        table_layout = QVBoxLayout(table_frame)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        table_header = QHBoxLayout()
        table_title = QLabel('üìä –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤')
        table_title_font = QFont()
        table_title_font.setPointSize(12)
        table_title_font.setBold(True)
        table_title.setFont(table_title_font)
        table_header.addWidget(table_title)
        
        # –°—á—ë—Ç—á–∏–∫ –∑–∞–ø–∏—Å–µ–π
        self.records_label = QLabel('–ó–∞–ø–∏—Å–µ–π: 0')
        table_header.addWidget(self.records_label)
        table_header.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = QPushButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å')
        refresh_btn.clicked.connect(self.load_orders)
        table_header.addWidget(refresh_btn)
        
        table_layout.addLayout(table_header)
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        self.orders_table = QTableView()
        self.orders_model = OrdersTableModel(self.db_session)
        self.orders_table.setModel(self.orders_model)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        self.orders_table.setSelectionBehavior(QTableView.SelectRows)
        self.orders_table.setAlternatingRowColors(True)
        self.orders_table.setSortingEnabled(True)
        self.orders_table.setContextMenuPolicy(Qt.CustomContextMenu)
        self.orders_table.customContextMenuRequested.connect(self.show_context_menu)
        self.orders_table.doubleClicked.connect(self.edit_order)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header = self.orders_table.horizontalHeader()
        header.setStretchLastSection(True)
        header.setSectionResizeMode(QHeaderView.Interactive)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        self.orders_table.setColumnWidth(0, 100)  # ‚Ññ –∑–∞–∫–∞–∑–∞
        self.orders_table.setColumnWidth(1, 100)  # –î–∞—Ç–∞
        self.orders_table.setColumnWidth(2, 200)  # –ö–ª–∏–µ–Ω—Ç
        self.orders_table.setColumnWidth(3, 150)  # –ê–≤—Ç–æ–º–æ–±–∏–ª—å
        self.orders_table.setColumnWidth(4, 120)  # VIN
        self.orders_table.setColumnWidth(5, 120)  # –°—Ç–∞—Ç—É—Å
        self.orders_table.setColumnWidth(6, 100)  # –°—É–º–º–∞
        self.orders_table.setColumnWidth(7, 100)  # –û—Å—Ç–∞—Ç–æ–∫
        
        table_layout.addWidget(self.orders_table)
        
        return table_frame
        
    def create_actions_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
        actions_layout = QHBoxLayout()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        new_order_btn = QPushButton('‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑')
        new_order_btn.setProperty('accent', True)
        new_order_btn.clicked.connect(self.new_order)
        actions_layout.addWidget(new_order_btn)
        
        edit_order_btn = QPushButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
        edit_order_btn.clicked.connect(self.edit_order)
        actions_layout.addWidget(edit_order_btn)
        
        view_order_btn = QPushButton('üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä')
        view_order_btn.clicked.connect(self.view_order_details)
        actions_layout.addWidget(view_order_btn)
        
        actions_layout.addStretch()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        print_btn = QPushButton('üñ®Ô∏è –ü–µ—á–∞—Ç—å')
        print_btn.clicked.connect(self.print_order)
        actions_layout.addWidget(print_btn)
        
        export_btn = QPushButton('üìÑ –≠–∫—Å–ø–æ—Ä—Ç')
        export_btn.clicked.connect(self.export_orders)
        actions_layout.addWidget(export_btn)
        
        return actions_layout
        
    def show_context_menu(self, position):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é"""
        if not self.orders_table.indexAt(position).isValid():
            return
            
        menu = QMenu(self)
        
        view_action = QAction(QIcon('resources/icons/view.png'), '–ü—Ä–æ—Å–º–æ—Ç—Ä', self)
        view_action.triggered.connect(self.view_order_details)
        menu.addAction(view_action)
        
        edit_action = QAction(QIcon('resources/icons/edit.png'), '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', self)
        edit_action.triggered.connect(self.edit_order)
        menu.addAction(edit_action)
        
        menu.addSeparator()
        
        print_action = QAction(QIcon('resources/icons/print.png'), '–ü–µ—á–∞—Ç—å –Ω–∞—Ä—è–¥–∞', self)
        print_action.triggered.connect(self.print_order)
        menu.addAction(print_action)
        
        pdf_action = QAction(QIcon('resources/icons/pdf.png'), '–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF', self)
        pdf_action.triggered.connect(self.export_pdf)
        menu.addAction(pdf_action)
        
        menu.addSeparator()
        
        copy_action = QAction(QIcon('resources/icons/copy.png'), '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ', self)
        copy_action.triggered.connect(self.copy_order_data)
        menu.addAction(copy_action)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–≤–∏—Å–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        selected_order = self.get_selected_order()
        if selected_order:
            menu.addSeparator()
            
            if selected_order.status == OrderStatus.DRAFT:
                start_work_action = QAction('‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', self)
                start_work_action.triggered.connect(self.start_work)
                menu.addAction(start_work_action)
                
            elif selected_order.status == OrderStatus.IN_WORK:
                complete_action = QAction('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É', self)
                complete_action.triggered.connect(self.complete_work)
                menu.addAction(complete_action)
                
            elif selected_order.status in [OrderStatus.WAITING_PAYMENT, OrderStatus.COMPLETED]:
                payment_action = QAction('üí∞ –î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É', self)
                payment_action.triggered.connect(self.add_payment)
                menu.addAction(payment_action)
        
        menu.exec(self.orders_table.mapToGlobal(position))
        
    def get_selected_order(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑"""
        selection = self.orders_table.selectionModel()
        if not selection.hasSelection():
            return None
            
        row = selection.currentIndex().row()
        return self.orders_model.get_order(row)
        
    def apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"""
        filters = {
            'status': self.status_filter.currentText(),
            'client_search': self.client_search.text().strip(),
            'vin_search': self.vin_search.text().strip(),
            'date_from': self.date_from.date().toPython(),
            'date_to': self.date_to.date().toPython(),
            'only_unpaid': self.unpaid_only_cb.isChecked()
        }
        
        self.orders_model.refresh_data(filters)
        self.update_records_count()
        
    def reset_filters(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
        self.status_filter.setCurrentIndex(0)
        self.client_search.clear()
        self.vin_search.clear()
        self.date_from.setDate(QDate.currentDate().addDays(-30))
        self.date_to.setDate(QDate.currentDate())
        self.unpaid_only_cb.setChecked(False)
        self.apply_filters()
        
    def update_records_count(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø–∏—Å–µ–π"""
        count = self.orders_model.rowCount()
        self.records_label.setText(f'–ó–∞–ø–∏—Å–µ–π: {count}')
        
    def load_orders(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã"""
        self.apply_filters()
        self.status_message.emit('–ó–∞–∫–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 2000)
        
    def refresh_orders(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"""
        self.load_orders()
        
    def new_order(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
        # –°–∏–≥–Ω–∞–ª –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω –≥–ª–∞–≤–Ω—ã–º –æ–∫–Ω–æ–º –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É
        self.status_message.emit('–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞', 1000)
        
    def view_order_details(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
        current_row = self.orders_table.currentRow()
        if current_row < 0:
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
            return
        
        try:
            order_id = self.get_order_id_from_row(current_row)
            
            if not order_id:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–∫–∞–∑–∞")
                return
                
            dialog = OrderDetailsDialog(self, order_id=order_id)
            dialog.exec()
            
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞: {e}")
        
    def edit_order(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        current_row = self.orders_table.currentRow()
        if current_row < 0:
            QMessageBox.information(self, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
            return
        
        try:
            order_id = self.get_order_id_from_row(current_row)
            if not order_id:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–∫–∞–∑–∞")
                return
                
            dialog = OrderDetailsDialog(self, order_id=order_id, read_only=False)
            
    def start_work(self):
        """–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ –∑–∞–∫–∞–∑—É"""
        order = self.get_selected_order()
        if not order or order.status != OrderStatus.DRAFT:
            return
            
        try:
            order.status = OrderStatus.IN_WORK
            self.db_session.commit()
            self.refresh_orders()
            self.status_message.emit(f'–ó–∞–∫–∞–∑ {order.order_number} –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Ä–∞–±–æ—Ç—É', 3000)
        except Exception as e:
            self.db_session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}')
            
    def complete_work(self):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É"""
        order = self.get_selected_order()
        if not order or order.status != OrderStatus.IN_WORK:
            return
            
        try:
            if order.balance_due > 0:
                order.status = OrderStatus.WAITING_PAYMENT
                message = f'–ó–∞–∫–∞–∑ {order.order_number} –æ–∂–∏–¥–∞–µ—Ç –¥–æ–ø–ª–∞—Ç—É'
            else:
                order.status = OrderStatus.COMPLETED
                message = f'–ó–∞–∫–∞–∑ {order.order_number} –∑–∞–≤–µ—Ä—à—ë–Ω'
                
            self.db_session.commit()
            self.refresh_orders()
            self.status_message.emit(message, 3000)
        except Exception as e:
            self.db_session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç: {e}")
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—ã: {e}')
            
    def add_payment(self):
        """–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É"""
        order = self.get_selected_order()
        if not order:
            return
            
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        from sto_app.dialogs.payment_dialog import PaymentDialog
        dialog = PaymentDialog(self, order)
        if dialog.exec():
            self.refresh_orders()
            
    def print_order(self):
        """–ü–µ—á–∞—Ç—å –∑–∞–∫–∞–∑–∞"""
        order = self.get_selected_order()
        if not order:
            QMessageBox.information(self, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø–µ—á–∞—Ç–∏')
            return
            
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –ø–µ—á–∞—Ç–∏
        self.status_message.emit('–§—É–Ω–∫—Ü–∏—è –ø–µ—á–∞—Ç–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞', 2000)
        
    def export_pdf(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF"""
        order = self.get_selected_order()
        if not order:
            QMessageBox.information(self, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
            return
            
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –≤ PDF
        self.status_message.emit('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞', 2000)
        
    def export_orders(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel
        self.status_message.emit('–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞', 2000)
        
    def copy_order_data(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞"""
        order = self.get_selected_order()
        if not order:
            return

    def get_order_id_from_row(self, row):
        """–ü–æ–ª—É—á–∏—Ç—å ID –∑–∞–∫–∞–∑–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ UserRole
            for col in range(self.orders_table.columnCount()):
                item = self.orders_table.item(row, col)
                if item and item.data(Qt.UserRole):
                    return int(item.data(Qt.UserRole))
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
            order_number_item = self.orders_table.item(row, 0)
            if order_number_item:
                order_number = order_number_item.text()
                from sqlalchemy import select
                from sto_app.models_sto import Order
                
                stmt = select(Order.id).where(Order.order_number == order_number)
                result = self.db_session.execute(stmt)
                return result.scalar_one_or_none()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞–∫–∞–∑–∞: {e}")
            return None
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
        data = f"""–ó–∞–∫–∞–∑: {order.order_number}
–î–∞—Ç–∞: {order.date_received.strftime('%d.%m.%Y') if order.date_received else ''}
–ö–ª–∏–µ–Ω—Ç: {order.client.name if order.client else ''}
–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {order.car.full_name if order.car else ''}
VIN: {order.car.vin if order.car else ''}
–°—Ç–∞—Ç—É—Å: {order.status.value if order.status else ''}
–°—É–º–º–∞: {order.total_amount:.2f} ‚Ç¥
–û—Å—Ç–∞—Ç–æ–∫: {order.balance_due:.2f} ‚Ç¥"""
        
        from PySide6.QtGui import QClipboard
        clipboard = QClipboard()
        clipboard.setText(data)
        self.status_message.emit('–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞', 2000)
