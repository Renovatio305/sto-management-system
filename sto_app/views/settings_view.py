# sto_app/views/settings_view.py
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QFormLayout,
                              QGroupBox, QComboBox, QCheckBox, QPushButton,
                              QLabel, QSpinBox, QLineEdit, QTextEdit, QSlider,
                              QFileDialog, QMessageBox, QTabWidget)
from PySide6.QtCore import Qt, Signal, QSettings
from PySide6.QtGui import QFont
import logging


class SettingsView(QWidget):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–´ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å–∏–≥–Ω–∞–ª—ã
    theme_changed = Signal(str)     # –°–∏–≥–Ω–∞–ª —Å–º–µ–Ω—ã —Ç–µ–º—ã
    language_changed = Signal(str)  # –°–∏–≥–Ω–∞–ª —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    settings_changed = Signal()     # –°–∏–≥–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.logger = logging.getLogger(__name__)
        self.settings = QSettings('STOApp', 'Settings')
        
        self.setup_ui()
        self.load_settings()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
        title_font = QFont()
        title_font.setPointSize(16)
        title_font.setBold(True)
        title_label.setFont(title_font)
        layout.addWidget(title_label)
        
        # –¢–∞–±—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.tab_widget = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        interface_tab = self.create_interface_tab()
        self.tab_widget.addTab(interface_tab, 'üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å')
        
        # –í–∫–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        system_tab = self.create_system_tab()
        self.tab_widget.addTab(system_tab, 'üíª –°–∏—Å—Ç–µ–º–∞')
        
        # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        backup_tab = self.create_backup_tab()
        self.tab_widget.addTab(backup_tab, 'üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏')
        
        layout.addWidget(self.tab_widget)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_layout = QHBoxLayout()
        
        self.save_btn = QPushButton('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å')
        self.save_btn.clicked.connect(self.save_settings)
        actions_layout.addWidget(self.save_btn)
        
        self.reset_btn = QPushButton('üîÑ –°–±—Ä–æ—Å–∏—Ç—å')
        self.reset_btn.clicked.connect(self.reset_settings)
        actions_layout.addWidget(self.reset_btn)
        
        actions_layout.addStretch()
        
        layout.addLayout(actions_layout)
    
    def create_interface_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ì—Ä—É–ø–ø–∞ —Ç–µ–º—ã
        theme_group = QGroupBox('–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è')
        theme_layout = QFormLayout(theme_group)
        
        self.theme_combo = QComboBox()
        self.theme_combo.addItems(['–°–≤–µ—Ç–ª–∞—è', '–¢–µ–º–Ω–∞—è', '–°–∏—Å—Ç–µ–º–Ω–∞—è'])
        self.theme_combo.currentTextChanged.connect(self.on_theme_changed)
        theme_layout.addRow('–¢–µ–º–∞:', self.theme_combo)
        
        layout.addWidget(theme_group)
        
        # –ì—Ä—É–ø–ø–∞ —è–∑—ã–∫–∞
        language_group = QGroupBox('–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞')
        language_layout = QFormLayout(language_group)
        
        self.language_combo = QComboBox()
        self.language_combo.addItems(['–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 'English', '–†—É—Å—Å–∫–∏–π'])
        self.language_combo.currentTextChanged.connect(self.on_language_changed)
        language_layout.addRow('–Ø–∑—ã–∫:', self.language_combo)
        
        layout.addWidget(language_group)
        
        # –ì—Ä—É–ø–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_group = QGroupBox('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
        display_layout = QFormLayout(display_group)
        
        self.show_splash_cb = QCheckBox('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–∞—Å—Ç–∞–≤–∫—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ')
        self.show_splash_cb.setChecked(True)
        display_layout.addRow('', self.show_splash_cb)
        
        self.show_tips_cb = QCheckBox('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏')
        self.show_tips_cb.setChecked(True)
        display_layout.addRow('', self.show_tips_cb)
        
        self.animations_cb = QCheckBox('–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏')
        self.animations_cb.setChecked(True)
        display_layout.addRow('', self.animations_cb)
        
        layout.addWidget(display_group)
        
        layout.addStretch()
        return widget
    
    def create_system_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ì—Ä—É–ø–ø–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        autosave_group = QGroupBox('–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ')
        autosave_layout = QFormLayout(autosave_group)
        
        self.autosave_enabled_cb = QCheckBox('–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ')
        self.autosave_enabled_cb.setChecked(True)
        autosave_layout.addRow('', self.autosave_enabled_cb)
        
        self.autosave_interval_spin = QSpinBox()
        self.autosave_interval_spin.setRange(1, 60)
        self.autosave_interval_spin.setValue(5)
        self.autosave_interval_spin.setSuffix(' –º–∏–Ω')
        autosave_layout.addRow('–ò–Ω—Ç–µ—Ä–≤–∞–ª:', self.autosave_interval_spin)
        
        layout.addWidget(autosave_group)
        
        # –ì—Ä—É–ø–ø–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging_group = QGroupBox('–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ')
        logging_layout = QFormLayout(logging_group)
        
        self.log_level_combo = QComboBox()
        self.log_level_combo.addItems(['DEBUG', 'INFO', 'WARNING', 'ERROR'])
        self.log_level_combo.setCurrentText('INFO')
        logging_layout.addRow('–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤:', self.log_level_combo)
        
        self.log_to_file_cb = QCheckBox('–°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª')
        self.log_to_file_cb.setChecked(True)
        logging_layout.addRow('', self.log_to_file_cb)
        
        layout.addWidget(logging_group)
        
        # –ì—Ä—É–ø–ø–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_group = QGroupBox('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å')
        performance_layout = QFormLayout(performance_group)
        
        self.cache_size_spin = QSpinBox()
        self.cache_size_spin.setRange(10, 1000)
        self.cache_size_spin.setValue(100)
        self.cache_size_spin.setSuffix(' –ú–ë')
        performance_layout.addRow('–†–∞–∑–º–µ—Ä –∫—ç—à–∞:', self.cache_size_spin)
        
        self.preload_data_cb = QCheckBox('–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
        self.preload_data_cb.setChecked(True)
        performance_layout.addRow('', self.preload_data_cb)
        
        layout.addWidget(performance_group)
        
        layout.addStretch()
        return widget
    
    def create_backup_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # –ì—Ä—É–ø–ø–∞ –∞–≤—Ç–æ–±—ç–∫–∞–ø–∞
        autobackup_group = QGroupBox('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ')
        autobackup_layout = QFormLayout(autobackup_group)
        
        self.autobackup_enabled_cb = QCheckBox('–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–±—ç–∫–∞–ø')
        self.autobackup_enabled_cb.setChecked(True)
        autobackup_layout.addRow('', self.autobackup_enabled_cb)
        
        self.backup_interval_spin = QSpinBox()
        self.backup_interval_spin.setRange(1, 168)
        self.backup_interval_spin.setValue(24)
        self.backup_interval_spin.setSuffix(' —á')
        autobackup_layout.addRow('–ò–Ω—Ç–µ—Ä–≤–∞–ª:', self.backup_interval_spin)
        
        self.backup_path_edit = QLineEdit()
        self.backup_path_edit.setPlaceholderText('–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π')
        backup_path_button = QPushButton('üìÅ –í—ã–±—Ä–∞—Ç—å')
        backup_path_button.clicked.connect(self.select_backup_path)
        
        backup_path_layout = QHBoxLayout()
        backup_path_layout.addWidget(self.backup_path_edit)
        backup_path_layout.addWidget(backup_path_button)
        autobackup_layout.addRow('–ü–∞–ø–∫–∞:', backup_path_layout)
        
        self.max_backups_spin = QSpinBox()
        self.max_backups_spin.setRange(1, 100)
        self.max_backups_spin.setValue(30)
        autobackup_layout.addRow('–ú–∞–∫—Å. –∫–æ–ø–∏–π:', self.max_backups_spin)
        
        layout.addWidget(autobackup_group)
        
        # –ì—Ä—É–ø–ø–∞ —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        manual_group = QGroupBox('–†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')
        manual_layout = QVBoxLayout(manual_group)
        
        buttons_layout = QHBoxLayout()
        
        create_backup_btn = QPushButton('üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é')
        create_backup_btn.clicked.connect(self.create_backup)
        buttons_layout.addWidget(create_backup_btn)
        
        restore_backup_btn = QPushButton('üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∫–æ–ø–∏–∏')
        restore_backup_btn.clicked.connect(self.restore_backup)
        buttons_layout.addWidget(restore_backup_btn)
        
        manual_layout.addLayout(buttons_layout)
        
        layout.addWidget(manual_group)
        
        layout.addStretch()
        return widget
    
    def on_theme_changed(self, theme_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã"""
        theme_map = {
            '–°–≤–µ—Ç–ª–∞—è': 'light',
            '–¢–µ–º–Ω–∞—è': 'dark', 
            '–°–∏—Å—Ç–µ–º–Ω–∞—è': 'system'
        }
        
        theme_key = theme_map.get(theme_name, 'light')
        self.theme_changed.emit(theme_key)
        self.logger.info(f"–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {theme_name}")
    
    def on_language_changed(self, language_name):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞"""
        language_map = {
            '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': 'uk_UA',
            'English': 'en_US',
            '–†—É—Å—Å–∫–∏–π': 'ru_RU'
        }
        
        language_key = language_map.get(language_name, 'uk_UA')
        self.language_changed.emit(language_key)
        self.logger.info(f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {language_name}")
    
    def select_backup_path(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        path = QFileDialog.getExistingDirectory(
            self, 
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π',
            self.backup_path_edit.text()
        )
        
        if path:
            self.backup_path_edit.setText(path)
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        QMessageBox.information(
            self,
            '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è',
            '–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞'
        )
    
    def restore_backup(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        QMessageBox.information(
            self,
            '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ',
            '–§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞'
        )
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            theme = self.settings.value('theme', 'light')
            theme_names = {'light': '–°–≤–µ—Ç–ª–∞—è', 'dark': '–¢–µ–º–Ω–∞—è', 'system': '–°–∏—Å—Ç–µ–º–Ω–∞—è'}
            self.theme_combo.setCurrentText(theme_names.get(theme, '–°–≤–µ—Ç–ª–∞—è'))
            
            language = self.settings.value('language', 'uk_UA')
            language_names = {'uk_UA': '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞', 'en_US': 'English', 'ru_RU': '–†—É—Å—Å–∫–∏–π'}
            self.language_combo.setCurrentText(language_names.get(language, '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞'))
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.show_splash_cb.setChecked(self.settings.value('show_splash', True, bool))
            self.show_tips_cb.setChecked(self.settings.value('show_tips', True, bool))
            self.animations_cb.setChecked(self.settings.value('animations', True, bool))
            
            # –°–∏—Å—Ç–µ–º–∞
            self.autosave_enabled_cb.setChecked(self.settings.value('autosave_enabled', True, bool))
            self.autosave_interval_spin.setValue(self.settings.value('autosave_interval', 5, int))
            self.log_level_combo.setCurrentText(self.settings.value('log_level', 'INFO'))
            self.log_to_file_cb.setChecked(self.settings.value('log_to_file', True, bool))
            self.cache_size_spin.setValue(self.settings.value('cache_size', 100, int))
            self.preload_data_cb.setChecked(self.settings.value('preload_data', True, bool))
            
            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.autobackup_enabled_cb.setChecked(self.settings.value('autobackup_enabled', True, bool))
            self.backup_interval_spin.setValue(self.settings.value('backup_interval', 24, int))
            self.backup_path_edit.setText(self.settings.value('backup_path', ''))
            self.max_backups_spin.setValue(self.settings.value('max_backups', 30, int))
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            theme_map = {'–°–≤–µ—Ç–ª–∞—è': 'light', '–¢–µ–º–Ω–∞—è': 'dark', '–°–∏—Å—Ç–µ–º–Ω–∞—è': 'system'}
            self.settings.setValue('theme', theme_map.get(self.theme_combo.currentText(), 'light'))
            
            language_map = {'–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞': 'uk_UA', 'English': 'en_US', '–†—É—Å—Å–∫–∏–π': 'ru_RU'}
            self.settings.setValue('language', language_map.get(self.language_combo.currentText(), 'uk_UA'))
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.settings.setValue('show_splash', self.show_splash_cb.isChecked())
            self.settings.setValue('show_tips', self.show_tips_cb.isChecked())
            self.settings.setValue('animations', self.animations_cb.isChecked())
            
            # –°–∏—Å—Ç–µ–º–∞
            self.settings.setValue('autosave_enabled', self.autosave_enabled_cb.isChecked())
            self.settings.setValue('autosave_interval', self.autosave_interval_spin.value())
            self.settings.setValue('log_level', self.log_level_combo.currentText())
            self.settings.setValue('log_to_file', self.log_to_file_cb.isChecked())
            self.settings.setValue('cache_size', self.cache_size_spin.value())
            self.settings.setValue('preload_data', self.preload_data_cb.isChecked())
            
            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.settings.setValue('autobackup_enabled', self.autobackup_enabled_cb.isChecked())
            self.settings.setValue('backup_interval', self.backup_interval_spin.value())
            self.settings.setValue('backup_path', self.backup_path_edit.text())
            self.settings.setValue('max_backups', self.max_backups_spin.value())
            
            self.settings_changed.emit()
            
            QMessageBox.information(self, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ')
            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}')
    
    def reset_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        reply = QMessageBox.question(
            self,
            '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?',
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.settings.clear()
            self.load_settings()
            QMessageBox.information(self, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')
            self.logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")